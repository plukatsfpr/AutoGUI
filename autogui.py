# This file is part of AutoGUI.
# Copyright 2025 Peer Lukat
# Peer.Lukat@helmholtz-hzi.de
# Helmholtz-Centre for Infection Research, Structure & Function of Proteins
#
#    AutoGUI is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#    AutoGUI is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with AutoGUI.  If not, see <http://www.gnu.org/licenses/>.


version = 'v.20250307'                             # current version
# LINUX!

# Dependencies required:
# FreeSimpleGUI (pip install FreeSimpleGUI)
# psutil (pip install psutil)
# PIL (pip install Pillow)
# Working installation of GPhL AutoPROC (www.globalphasing.com/autoproc/)
# Working installation of CCP4i (www.ccp4.ac.uk)
# Working installation of Adxv for Image viewing (www.scripps.edu/tainer/arvai/adxv.html)
# Working installation of ImageMagick (www.imagemagick.org)
# Something to open PDFs
# Some webbrowser
# Screen for batch processing


# Fallback configuration if config file can't be read
browser = "chromium"                                  # path to/ command to start browser  
dark_theme = False                                    # use dark or light theme  
inpath = "/Data/"                                     # change this to default in path
outpath = "~"                                          # change this to default out path
preplist = 'refine coot phaser xtriage autobuild pdb_deposit ccp4 pymol' # list of folders to create if "prepare folders" is checked. "autoproc" is required and will always be created. "images" will be created if linking image files is enabled. "beamline_processed" will be created if linking of beamline-processed data is enabled and such data is found.
prepfolder_classic = True
prepfolder_batch = True
use_screen = True

theme_highlight_color = '#458eaf'
dark_theme_color = '#2b2a32' 
light_theme_color = 'white'

color_option_1 = '#458eaf'
color_option_2 = '#8fb0a9'
color_option_3 = '#639867'
color_option_4 = '#b64040'
color_option_5 = '#c46316'
color_option_6 = '#d8a2c8'

theme_color_rgb = [69, 142, 175]




# import PySimpleGUI as sg
import FreeSimpleGUI as sg
import subprocess
import os
import re
import sys
import pwd
import threading
import time
import datetime
import gc


# icon
ag_icon = b''
ag_64 = ''

print('')
print("**************************************************************************************************")
print("     AutoGUI - a python-based GUI for running GPhL autoPROC")
print("     Copyright 2025 Peer Lukat")
print("     peer.lukat@helmholtz-hzi.de")
print("     AutoGUI is free software released under the GNU General Public License Version 3 (or later)") 
print("     (GPL-3.0-or-later)")
print("**************************************************************************************************")
print('')

config_path = os.path.join(os.path.dirname(__file__), 'autogui.cfg')                        # path to configuration file
classic_path = os.path.join(os.path.dirname(__file__), 'autogui_classic.py')                # path to autogui_classic
batch_path = os.path.join(os.path.dirname(__file__), 'autogui_batch.py')                    # path to autogui_batch
changelog_path = os.path.join(os.path.dirname(__file__), 'autogui_changelog.txt')           # path to changelog
license_path = os.path.join(os.path.dirname(__file__), 'COPYING')                           # path to GNU GENERAL PUBLIC LICENSE Version 3
personal_config = os.path.join(os.path.expanduser('~'), ".autogui_priv.cfg")                # path to personal config
#print(personal_config)

welcome = "Welcome to AutoGUI " + version + "\na python-based GUI for running GPhL autoPROC"
win_title = 'AutoGUI-Launcher ' + version

connect_command = None
task = None
debug = False
found_results = []
#find_path = os.path.expanduser('~')
find_path = outpath
find_number = '20'
classicresults = True
batchresults = True
default_table_values = [['         ','         ','                                                ']]
table_values = default_table_values
include_commandline = True
exclude_failed = False
logtitle = "AutoGUI Logfiles"

# Helper function to find last results
def get_results(classicresults, batchresults,find_path,find_number):
    found_results = []
    user = pwd.getpwuid(os.getuid()).pw_name
    if classicresults == True and batchresults == False:
        searchvar = "-name autogui_log.html"
    elif classicresults == False and batchresults == True:
        searchvar = "-name batchproc.html"
    else:
        searchvar = '-type f \( -name "autogui_log.html" -o -name "batchproc.html" \)' 
    findcheck1 = re.compile("autogui_log.html")
    findcheck2 = re.compile("batchproc.html")
    if sys.platform == 'darwin':
        find_command = "find " + find_path + " " + searchvar + " -user " + user + " -exec stat -f '%m %N' {} \; | sort -nr | awk 'NR==1,NR==" + find_number +" {print $2}'" # darwin
    else:
        find_command = "find " + find_path + " " + searchvar + " -user " + user + " -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1,NR==" + find_number +" {print $2}'" # Linux
    while True:
        find_results = subprocess.Popen(find_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
        output = (find_results.stdout.readlines())
        for line in output:
            line = line.strip()
            if findcheck1.search(line) != None or findcheck2.search(line) != None:
                moddate = int(os.path.getmtime(line))
                #print(moddate)
                logdate = datetime.datetime.fromtimestamp(moddate).strftime('%x')
                #print (line)
                if findcheck1.search(line) != None:
                    logtype = "Classic"
                else: 
                    logtype = "Batch"

                short_path = "./" + os.path.relpath(line, find_path) 
                found_result = [logdate, logtype, short_path]
                found_results.append(found_result)
        #print(found_results)       
        return found_results
        break  

# Helper function to get screen info
def screen_info():
    user = pwd.getpwuid(os.getuid()).pw_name
    os.system('screen -wipe')
    screenargs = []
    while True:
        check_screen_command = 'screen -ls'
        screencheck = re.compile(user)
        screendiscard = re.compile('Socket')
        check_screen = subprocess.Popen(check_screen_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
        output = (check_screen.stdout.readlines())
        for line in output:
            line = line.strip()
            #print(line)
            if (screencheck.search(line) != None) and (screendiscard.search(line) == None):
                screenarg = (re.split("[\. \(\)]+", line))
                screenarg.pop()
                screenargs.append(screenarg)
                #for screenarg in screenargs:
                    #print(screenarg)      
        return screenargs
        break  

# export results
def export_results(exporttype, exportpath, filetoexport, find_path, table_values, theme_color, theme_color1, theme_color2, include_commandline, exclude_failed, logtitle):
    exportlist = [] #0=Date, 1=Mode, 2=Table path, 3=Absolute path, 4= Relative path, 5=CSV read
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
    else:    
        alt_theme_color1 = 'black'

    for table_value in table_values:
        absolute_table_path = os.path.join(find_path,table_value[2].strip("./"))
        relative_table_path = os.path.relpath(absolute_table_path, exportpath)
        table_value.append(absolute_table_path)
        table_value.append(relative_table_path)
        print(absolute_table_path)
        path_with_stuff = re.split("/[^/]+$", absolute_table_path)[0]
        csv_read = []
        csv_item = ['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A'] # Dataset ID;Successful processing;Space group;Cell dimensions [Å];Cell angles [°];Isotropic diffraction limit [Å];Anisotropic diffraction limits [Å];Autoproc command line
        if table_value[1] == 'Classic':
            path_to_csv = os.path.join(path_with_stuff, "useful_files/datasets.csv")
        else:
            path_to_csv = os.path.join(path_with_stuff, "datasets.csv")   
        if os.path.exists(path_to_csv):
            #print(path_to_csv, "found.")
            with open (path_to_csv, 'rt') as csvfile:
                for line in csvfile:
                    #print(line, "line in csv")
                    line = line.strip()
                    csv_read.append(line)
            csvfile.close()  
            csv_read.pop(0)
        else:
            #print(path_to_csv, "does not exist.")
            csv_read = []
        table_value.append(csv_read)
        exportlist.append(table_value)            

    #print(exportlist)
    f = open(filetoexport, "w")
    if exporttype == ".csv":
        f.write('#;Date;Processing mode;Path;Dataset ID;Successful processing;Space group;Cell dimensions [Å];Cell angles [°];Isotropic diffraction limit [Å];Anisotropic diffraction limits [Å];Autoproc command line\n')
        exp_counter = 1
        for exportvalue in exportlist:
            csv_read = exportvalue[5]
            if len(csv_read) > 0:
                content_counter = 1
                for line in csv_read:
                    #print(line)
                    csv_item = (line.strip()).split(';')
                    csv_item.pop(0)
                    csv_values = ';'.join(csv_item)
                    if len(csv_read) > 1:
                        ds_count = str(exp_counter) + "." + str(content_counter)
                    else:
                        ds_count = str(exp_counter)    
                    table_line = ds_count + ";" + exportvalue[0] + ";" + exportvalue[1] + ";" + exportvalue[3] + ";" + csv_values
                    table_line = table_line + "\n"
                    f.write(table_line)
                    print(table_line)
                    content_counter = content_counter + 1
            else:
                csv_item = ['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']
                csv_values = ';'.join(csv_item)
                table_line = str(exp_counter) + ";" + exportvalue[0] + ";" + exportvalue[1] + ";" + exportvalue[3] + ";" + csv_values
                table_line = table_line + "\n"
                f.write(table_line)      
            exp_counter = exp_counter + 1
    else:
        f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
        f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
        f.write('<html>\n')
        f.write('<head>\n')
        title = '    <title>Exported list of AutoGUI processing results</title>\n'
        f.write(title)
        f.write('<style>\n')
        f.write('    a:link {\n')
        f.write(' font-family: arial, sans-serif;\n')
        f.write(' border-collapse: collapse;\n')
        f.write(' font-size:13px;\n')
        f.write(' color: '+ theme_color2 +' ;\n')
        f.write(' text-decoration: none;\n')
        f.write('}\n')
        f.write('    a:visited {\n')
        f.write(' font-family: arial, sans-serif;\n')
        f.write(' border-collapse: collapse;\n')
        f.write(' font-size:13px;\n')
        f.write(' color: '+ theme_color2 +' ;\n')
        f.write(' text-decoration: none;\n')
        f.write('}\n')    
        f.write('a:hover {\n')
        f.write(' color: ' + theme_color + ';\n')
        f.write(' text-decoration: underline;\n')
        f.write('}\n')
        f.write('a:active {\n')
        f.write(' color: '+ alt_theme_color1 +' ;\n')
        f.write(' text-decoration: underline;\n')
        f.write('}\n')			
        f.write('table {\n')
        f.write(' font-family: arial, sans-serif;\n')
        f.write(' border-collapse: collapse;\n')
        f.write(' width: 95%;\n')
        f.write('}\n')
        f.write('button {\n')
        f.write('	font-size:13px;\n') 
        f.write('	color: '+ theme_color1 +' ;\n') 
        f.write('	background-color: ' + theme_color + ';\n') 
        f.write('	border: none;\n')
        f.write('	outline: none;\n')     
        f.write('	padding: 4px 4px;\n') 
        f.write('	cursor: pointer;\n') 
        f.write('	border-color: ' + theme_color + ';\n')
        f.write('	display: block;\n')
        f.write('	width: 100%;\n')
        f.write('	text-align: center;\n')
        f.write('	position: relative;\n')
        f.write('}\n')
        f.write('button:hover {\n')
        f.write('	color: ' + theme_color + ';\n') 
        f.write('	background-color: '+ theme_color1+ ' ;\n');
        f.write('	border: 1px solid ' + theme_color + ';\n');
        f.write('	padding: 3px 3px;\n');
        f.write('}\n')
        f.write('table {\n')
        f.write(' font-family: arial, sans-serif;\n')
        f.write(' border-collapse: collapse;\n')
        f.write(' width: 95%;\n')
        f.write('}\n')
        f.write('\n')
        f.write('td, th {\n')
        f.write(' border: 0px solid '+ theme_color1 +' ;\n')
        f.write(' text-align: left;\n')
        f.write(' padding: 8px;\n')
        f.write(' font-size:13px;\n')
        f.write('}\n')
        f.write('\n')
        f.write('td {\n')
        f.write(' background-color: '+ theme_color1 +' ;\n')
        f.write('}\n')
        f.write('\n')
        f.write('th {\n')
        f.write('background-color: ' + theme_color + ';\n')
        f.write('   color: '+ theme_color1 +' ; \n')
        f.write('}\n')
        f.write('</style>\n')
        f.write('</head>\n')
        f.write('<body style="background-color:'+ alt_theme_color1 +';>\n')
        f.write('<center>\n')
        f.write('<div class="main">\n')
        f.write('<center>\n')
        f.write('	<table>\n')
        f.write("            <tr>\n")
        f.write("            <th style='font-size:6px; text-align: center; color: white; background-color: "+ theme_color + "; width: 40px'><img src=\"data:image/png;base64,"+ ag_64 +" alt=\"AutoGUI Logo\" /><a> AutoGUI "+ version + "</a></td>\n")  
        f.write("		        <th> </th>\n") 
        f.write("		        <th style='color: white; font-size:20px'; colspan=\"3\">" + logtitle + "</th>\n")
        if exclude_failed == False:
            f.write("		        <th> </th>\n")  
        if include_commandline == True:
            f.write("		        <th> </th>\n") 
        f.write("               <th style='font-size:13px; text-align: left; color: white; background-color: "+ theme_color + "'>Searched in:<br>" + find_path + "</th>\n")    
        f.write("               <th style='font-size:13px; text-align: left; color: white; background-color: "+ theme_color + "; width: 140px'>Search date:<br>"+ datetime.date.today().strftime("%m/%d/%y") + "</th>\n")    
        f.write("	       </tr>\n")
        f.write("         <tr>\n")
        f.write("	<tr style = 'background-color: " + alt_theme_color1 + "'><td style = 'background-color: " + alt_theme_color1 + "'></td> </tr>\n")
        f.write("	<tr style = 'background-color: " + alt_theme_color1 + "'><td style = 'background-color: " + alt_theme_color1 + "'></td> </tr>\n")
        numberofexports = 0 
        for exportvalue in exportlist:
            failed_counter = 0
            success_counter = 0
            failed_job = False
            csv_read = exportvalue[5]
            if len(csv_read) > 0:
                for line in csv_read:
                    line = (line.strip()).split(';')
                    if line[2] == "True":
                        success_counter = success_counter + 1
                    if line[2] == "False":
                        failed_counter = failed_counter + 1    
            if (success_counter == 0) and (failed_counter > success_counter):
                failed_job = True
            else:
                failed_job = False 
            if (failed_job == False) or (exclude_failed == False):
                numberofexports = numberofexports + 1     
                f.write("         <tr  style='background-color: "+ alt_theme_color1 +"'>\n")   
                if exporttype == "absolute links":
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"2\"> <b><a href = " + exportvalue[3] + " target =\"_blank\">Date: " + exportvalue[0] + "</a></b></td>\n")
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"1\"> <b><a href = " + exportvalue[3] + " target =\"_blank\">Mode: " + exportvalue[1] + "</a></b></td>\n")
                    f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'; colspan=\"3\"> <b><u><a href = " + exportvalue[3] + " target =\"_blank\">Processing log: " + exportvalue[3] + "</a></u></b></td>\n")
                    if exclude_failed == False:
                        f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'> <b><u><a href = " + exportvalue[3] + " target =\"_blank\"> </a></u></b></td>\n")  
                    if include_commandline == True:
                        f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'> <b><u><a href = " + exportvalue[3] + " target =\"_blank\"> </a></u></b></td>\n") 
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"1\"> <b><a href = " + exportvalue[3] + " target =\"_blank\">Jobs: </a><a style='color: "+ theme_color2 + "'>" + str(success_counter+failed_counter) + "<sup style='font-size:8px; color: #d0d0d0'>total</sup></a><a style='color: green'>" + str(success_counter) + "<sup style='font-size:8px; color: #d0d0d0'>done</sup></a><a style='color: red'>" + str(failed_counter) + "<sup style='font-size:8px; color: #d0d0d0'>failed</sup></a></b></td>\n")
                else:
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"2\"> <b><a href = " + exportvalue[4] + " target =\"_blank\">Date: " + exportvalue[0] + "</a></b></td>\n")
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"1\"> <b><a href = " + exportvalue[4] + " target =\"_blank\">Mode: " + exportvalue[1] + "</a></b></td>\n")
                    f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'; colspan=\"3\"> <b><u><a href = " + exportvalue[4] + " target =\"_blank\">Processing log: " + exportvalue[3] + "</a></u></b></td>\n")
                    if exclude_failed == False:
                        f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'> <b><u><a href = " + exportvalue[4] + " target =\"_blank\"> </a></u></b></td>\n")  
                    if include_commandline == True:
                        f.write("		        <td style='font-size:13px; color: " + theme_color + "; background-color: "+ theme_color1 +"'> <b><u><a href = " + exportvalue[4] + " target =\"_blank\"> </a></u></b></td>\n") 
                    f.write("		        <td style='font-size:13px; background-color: "+ theme_color1 +"'; colspan=\"1\"> <b><a href = " + exportvalue[4] + " target =\"_blank\">Jobs: </a><a style='color: "+ theme_color2 + "'>" + str(success_counter+failed_counter) + "<sup style='font-size:8px; color: #d0d0d0'>total</sup></a><a style='color: green'>" + str(success_counter) + "<sup style='font-size:8px; color: #d0d0d0'>done</sup></a><a style='color: red'>" + str(failed_counter) + "<sup style='font-size:8px; color: #d0d0d0'>failed</sup></a></b></td>\n")
                f.write("         </tr>\n")
                f.write("         <tr style='background-color: "+ theme_color +"'>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>#</b></td>\n")
                if exclude_failed == False:
                    f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Status</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Dataset</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Space group</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Cell dimensions [Å]</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Cell angles [°]</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Isotropic diffraction limit [Å]</b></td>\n")
                f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Anisotropic diffraction limits [Å]</b></td>\n")
                if include_commandline == True:
                    f.write("		        <td style='font-size:13px; color: white; background-color: "+ theme_color +"'> <b>Autoproc command line</b></td>\n")
                f.write("         </tr>\n")
                csv_read = exportvalue[5]
                if len(csv_read) > 0:
                    content_counter = 1
                    for line in csv_read:
                        csv_item = (line.strip()).split(';')
                        csv_item.pop(0)
                        if (exclude_failed == False) or (csv_item[1] == "True"):
                            f.write("         <tr style='background-color: "+ theme_color1 +"'>\n")
                            if len(csv_read) > 1:
                                ds_count = str(numberofexports) + "." + str(content_counter)
                            else:
                                ds_count = str(numberofexports) 
                            #csv_item =  Dataset ID;Successful processing;Space group;Cell dimensions [Å];Cell angles [°];Isotropic diffraction limit [Å];Anisotropic diffraction limits [Å];Autoproc command line    
                            f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + ds_count + "</a></td>\n") 
                            try:
                                if exclude_failed == False:
                                    if csv_item[1] == "True":
                                        f.write("		        <td style='font-size:25px; color: green; background-color: "+ theme_color1 +"'><a><b>&#10004;</b></a></td>\n")
                                    else:
                                        f.write("		        <td style='font-size:25px; color: red; background-color: "+ theme_color1 +"'><a><b>&#10008;</b></a></td>\n")     
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[0] + "</a></td>\n") 
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[2] + "</a></td>\n")
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[3] + "</a></td>\n")
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[4] + "</a></td>\n")
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[5] + "</a></td>\n") 
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[6] + "</a></td>\n")   
                                if include_commandline == True:
                                    f.write("		        <td style='font-size:10px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[7] + "</a></td>\n")        
                            except:
                                f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>N/A</a></td>\n") 
                                print('Missing csv data!')
                                print('')
                            f.write("	        </tr>\n") 
                            content_counter = content_counter + 1
                else:
                    f.write("         <tr style='background-color: "+ theme_color1 +"'>\n")
                    csv_item = ['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + str(numberofexports) + "</a></td>\n")
                    if exclude_failed == False:
                        f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[1] + "</a></td>\n") 
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[0] + "</a></td>\n") 
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[2] + "</a></td>\n")
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[3] + "</a></td>\n")
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[4] + "</a></td>\n")
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[5] + "</a></td>\n") 
                    f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[6] + "</a></td>\n")   
                    if include_commandline == True:
                        f.write("		        <td style='font-size:13px; color: " + theme_color2 + "; background-color: "+ theme_color1 +"'> <a>" + csv_item[7] + "</a></td>\n") 
                    f.write("	        </tr>\n")             
                f.write("	<tr style = 'background-color: " + alt_theme_color1 + "'><td style = 'background-color: " + alt_theme_color1 + "'></td></tr>\n")
                
        f.write('	</table>\n')
        f.write('\n')
        f.write('</div>\n')
        f.write('</center>\n')
        f.write('</body>\n')
        f.write('</html>\n')
    f.close()
    print("Wrote", filetoexport)        

# thread for generic long function to keep gui working
def browser_thread(window):
    browser_command = (browser + ' ' + browser_target)
    subprocess.Popen(browser_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, universal_newlines=True, shell=True)
        
#helper function to open browser in thread
def open_browser(browser, browser_target):
    threading.Thread(target=browser_thread, args=(window,), daemon=True).start()

def save_preferences(dark_theme, theme_highlight_color, prepfolder_classic, prepfolder_batch, preplist, inpath, outpath, use_screen):
    f = open(personal_config, "w")
    f.write('# Use dark theme?\n')
    prefline = 'dark_theme = ' + str(dark_theme) + '\n\n'
    f.write(prefline)
    f.write('# Theme highlight color (hex value)\n')
    prefline = 'theme_highlight_color = ' + str(theme_highlight_color) + '\n\n'
    f.write(prefline)
    f.write('# Make subfolders in CLASSIC mode?\n')
    prefline = 'prepfolder_classic = ' + str(prepfolder_classic) + '\n\n'
    f.write(prefline)
    f.write('# Make subfolders in BATCH mode?\n')
    prefline = 'prepfolder_batch = ' + str(prepfolder_batch) + '\n\n'
    f.write(prefline)    
    f.write('# Which subfolders to make?\n')
    prefline = 'preplist = ' + str(preplist) + '\n\n'
    f.write(prefline) 
    f.write('# Default input root path?\n')
    prefline = 'inpath = ' + str(inpath) + '\n\n'
    f.write(prefline)  
    f.write('# Default output root path?\n')
    prefline = 'outpath = ' + str(outpath) + '\n\n'
    f.write(prefline)
    f.write('# Use "screen" for detached execution of autoGUI batch?\n')
    prefline = 'use_screen = ' + str(use_screen) + '\n\n'
    f.write(prefline)         
    f.close()
    print("Wrote", personal_config)  

# color space conversion for themes
def hex_to_rgb(hexval):
    hexval = hexval.strip('#')
    return tuple(int(hexval[i:i+2], 16) for i in (0, 2, 4))
def rgb_to_hex(rgbcol):
    hexcolor = '#' + ('{:02X}' * 3).format(rgbcol[0], rgbcol[1], rgbcol[2])
    return hexcolor

#MAIN CODE STARTS HERE


# very first thing check if autoPROC works
proccheck_command = ("process -h")
proccheck_line_count = 0
proccheck_results = subprocess.Popen(proccheck_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
proccheck = (proccheck_results.stdout.readlines())
for line in proccheck:
    proccheck_line_count = proccheck_line_count + 1
if proccheck_line_count < 10:
    print('')
    print("-----WARNING!-----")
    print("There seems to be an issue with your instance of autoPROC.")
    print("A common issue for this message is that your autoPROC license has expired.")
    print("Check the status of your autoPROC version by typing 'process -h' on the terminal.")
    print('')
    sys.exit("Exiting.")    


# first thing: check if you have write access in the current folder
current_path = os.getcwd()
if os.access(current_path, os.W_OK) == False:
    print('')
    print("-----WARNING!-----")
    print("AutoGUI has to be started from a folder where you have permissions to write data!")
    print('')
    sys.exit("Exiting.")

# second thing: check if global config-file is available and read values
if os.path.exists(config_path) == True:
    cfg_browser = re.compile("browser = ")
    cfg_inpath = re.compile("inpath = ")
    cfg_outpath = re.compile("outpath = ")
    cfg_preplist = re.compile("preplist = ") 
    cfg_prepclassic = re.compile("prepfolder_classic = ")
    cfg_prepbatch = re.compile("prepfolder_batch = ")
    cfg_dark = re.compile("dark_theme = ")  
    with open (config_path, 'rt') as config:
        for line in config:
            line = line.strip() 
            if cfg_browser.search(line) != None:
                browser = (re.split(cfg_browser, line))[-1]
            if cfg_dark.search(line) != None:
                dark_theme = (re.split(cfg_dark, line))[-1]
                if dark_theme == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    dark_theme = True
                else:
                    dark_theme = False
            if cfg_prepclassic.search(line) != None:
                prepfolder_classic = (re.split(cfg_prepclassic, line))[-1]
                if prepfolder_classic == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_classic = True
                else:
                    prepfolder_classic = False
            if cfg_prepbatch.search(line) != None:
                prepfolder_batch = (re.split(cfg_prepbatch, line))[-1]
                if prepfolder_batch == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_batch = True
                else:
                    prepfolder_batch = False
            if cfg_inpath.search(line) != None:
                inpath = (re.split(cfg_inpath, line))[-1]
            if cfg_outpath.search(line) != None:
                outpath = (re.split(cfg_outpath, line))[-1]
            if cfg_preplist.search(line) != None:
                preplist = (re.split(cfg_preplist, line))[-1]                                            
    config.close()
else:
    print('')
    print('Global configuration file not found.')
    print('Falling back to default parameters.')
    print('')  

# third thing: check if personal config-file is available and read values
if os.path.exists(personal_config) == True:
    print("Personal config file found.")
    cfg_inpath = re.compile("inpath = ")
    cfg_outpath = re.compile("outpath = ")
    cfg_preplist = re.compile("preplist = ") 
    cfg_prepclassic = re.compile("prepfolder_classic = ")
    cfg_prepbatch = re.compile("prepfolder_batch = ")
    cfg_dark = re.compile("dark_theme = ")  
    cfg_highlight = re.compile("theme_highlight_color = ")
    cfg_screen = re.compile("use_screen = ")
    with open (personal_config, 'rt') as config:
        for line in config:
            line = line.strip() 
            if cfg_dark.search(line) != None:
                dark_theme = (re.split(cfg_dark, line))[-1]
                if dark_theme == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    dark_theme = True
                else:
                    dark_theme = False
            if cfg_prepclassic.search(line) != None:
                prepfolder_classic = (re.split(cfg_prepclassic, line))[-1]
                if prepfolder_classic == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_classic = True
                else:
                    prepfolder_classic = False
            if cfg_prepbatch.search(line) != None:
                prepfolder_batch = (re.split(cfg_prepbatch, line))[-1]
                if prepfolder_batch == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_batch = True
                else:
                    prepfolder_batch = False
            if cfg_inpath.search(line) != None:
                inpath = (re.split(cfg_inpath, line))[-1]
            if cfg_outpath.search(line) != None:
                outpath = (re.split(cfg_outpath, line))[-1]
            if cfg_preplist.search(line) != None:
                preplist = (re.split(cfg_preplist, line))[-1]  
            if cfg_highlight.search(line) != None:
                theme_highlight_color = (re.split(cfg_highlight, line))[-1]
            if cfg_screen.search(line) != None:
                use_screen = (re.split(cfg_screen, line))[-1]
                if use_screen == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    use_screen = True
                else:
                    use_screen = False
    config.close()
else:
    print('')
    print('Personal configuration file not found.')
    print('Falling back to default parameters for now.')
    print('')
    print('--Go to "Preferences" in the menu to customize your AutoGUI experience!--')
    print('') 
    
outpath = os.path.expanduser(outpath)
find_path = outpath

if os.path.exists(classic_path) == True:
    classic_disabled = False
    classic_color = 'black'
    classic_text = 'Run AutoGUI in "CLASSIC" mode for single dataset processing with many options.'
else:
    classic_disabled = True
    classic_color = '#A0A0A0'
    classic_text = 'AutoGUI-Classic seems not to be installed on your system.'

if os.path.exists(batch_path) == True:
    batch_disabled = False
    batch_color = 'black'
    batch_text = 'Run AutoGUI in "BATCH" mode for fast processing of many datasets.'
else:
    batch_disabled = True
    batch_color = '#A0A0A0'
    batch_text = 'AutoGUI-Batch seems not to be installed on your system.'

menu_def = ['Unused', ['&Preferences', '&Load and export results', '&Connect to running batch job', '&Kill previous batch job', '&Quit',]]

## GUI THEME DEFINITIONS


if dark_theme == True:
    # Definition of dark GUI theme
    theme_color = theme_highlight_color                    # theme highlight color
    theme_color1 =  dark_theme_color                       # theme background color
    theme_color2 = 'white'                                 # theme text color
    theme_color3 = '#2b2a32'                               # theme button and input text color
else:
    # Definition of light GUI theme
    theme_color = theme_highlight_color                   # theme highlight color
    theme_color1 = light_theme_color                      # theme background color
    theme_color2 = 'black'                                # theme text color
    theme_color3 = 'white'                                # theme button and input text color

Color_Theme = {'BACKGROUND': theme_color1,
               'TEXT': theme_color2,
               'INPUT': theme_color,
               'TEXT_INPUT': theme_color3,
               'SCROLL': theme_color,
               'BUTTON': (theme_color3, theme_color),
               'PROGRESS': (theme_color, '#D0D0D0'),
               'BORDER': 0,
               'SLIDER_DEPTH': 0,
               'PROGRESS_DEPTH': 0}

theme_color_rgb = hex_to_rgb(theme_color)

# Add your dictionary to the PySimpleGUI themes
sg.theme_add_new('AutoTheme', Color_Theme)

# Set PySimpleGui Theme and define options
sg.theme('AutoTheme')
sg.set_options(font = 'Helvetica 10', titlebar_background_color = theme_color1, titlebar_text_color = theme_color2, titlebar_icon = ag_icon, icon = ag_icon)


layout = [[sg.Frame(layout= 
                   [[sg.Button('', key ='-LOGOBUTTON-', image_data=ag_icon, image_subsample = 1, border_width = 0, button_color=(sg.theme_background_color(),sg.theme_background_color()), enable_events = True, tooltip = 'About'),
                         sg.Text(version, key ='-ABOUT-', font = "Helvetica 8", justification = "right", size = (11, 1),text_color = theme_color, enable_events = True, tooltip = 'About')],
                         [sg.Button('  Classic', key ='-CLASSIC-', font = ("Helvetica 11"), disabled = classic_disabled, highlight_colors = (theme_color, theme_color), tooltip = classic_text, size = (16,2), pad = ((1, 1), (1, 1)))],
                          [sg.Button('  Batch', key ='-BATCH-', font = ("Helvetica 11"), disabled = batch_disabled, highlight_colors = (theme_color, theme_color), tooltip = batch_text, size = (16,2), pad = ((1, 1), (1, 1)))],
                          [sg.Col([[(sg.ButtonMenu('\u2630', menu_def, key = '-MENU-',size = (1,1), font = ("Helvetica 14"), button_color = (theme_color, theme_color1), tooltip = 'Menu', border_width = 0, pad = ((1, 1), (1, 1))))]], justification = "center")]
                          ],
                          title = None, relief=sg.RELIEF_GROOVE, border_width = 0, pad = (1,1,1,1))]]

# create window
window = sg.Window(win_title, layout, no_titlebar=False, grab_anywhere=False, resizable=False, finalize=True, location = (300, 100))

print('\u2691  Ready.')

#do stuff
while True:
    event, values = window.read()
    #print(event)        

# show about section
    if event == '-ABOUT-' or event == '-LOGOBUTTON-':
        layout_about = [[sg.Text(win_title, justification = "left", font = "Arial 12", text_color = theme_color)],
                               [sg.Text('A simple interface to autoPROC (Global Phasing Ltd.)')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Text('\u00A9 Copyright 2025 Peer Lukat\nHelmholtz-Centre for Infection Research, Structure & Function of Proteins\npeer.lukat@helmholtz-hzi.de\nAutoGUI is released under the GNU General Public License Version 3 (or later).\nThere is (currently) no literature citation for it.')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Text('autoPROC is developed by Global Phasing Limited (UK)\nhttps://www.globalphasing.com')],
                               [sg.Text('For using autoPROC via AutoGUI, please cite:')],
                               [sg.Text('autoPROC:\nVonrhein, C., Flensburg, C., Keller, P., Sharff, A., Smart, O., Paciorek, W.,\nWomack, T. and Bricogne, G. (2011). Data processing and analysis with\nthe autoPROC toolbox. Acta Cryst. D67, 293-302.')],
                               [sg.Text('XDS/XSCALE:\nKabsch, W. (2010). XDS. Acta Cryst. D66, 125-132.')],
                               [sg.Text('POINTLESS:\nEvans, P.R. (2006). Scaling and assessment of data quality, Acta Cryst. D62, 72-82.')],
                               [sg.Text('CCP4:\nWinn, M.D., Ballard, C.C., Cowtan, K.D. Dodson, E.J., Emsley, P., Evans, P.R.,\nKeegan, R.M., Krissinel, E.B., Leslie, A.G.W., McCoy, A., McNicholas, S.J., Murshudov,\nG.N., Pannu, N.S., Potterton, E.A., Powell, H.R., Read, R.J., Vagin, A. and Wilson, K.S.\n(2011). Overview of the CCP4 suite and current developments, Acta. Cryst. D67, 235-242.')], 
                               [sg.Text('STARANISO:\nTickle, I.J., Flensburg, C., Keller, P., Paciorek, W., Sharff, A., Vonrhein, C.,\nand Bricogne, G. (2018-2021). STARANISO. Cambridge, United Kingdom: Global Phasing Ltd.')],
                               [sg.Text('AutoGUI is also using Adxv:\nArvai, A. Adxv - A Program to Display X-ray Diffraction Images,\nhttps://www.scripps.edu/tainer/arvai/adxv.html')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Button('Okay', highlight_colors = (theme_color, theme_color)), sg.Button('Changelog', button_color = (theme_color, theme_color1), mouseover_colors = (theme_color1, theme_color), highlight_colors = (theme_color, theme_color)), sg.Button('License information', button_color = (theme_color, theme_color1), mouseover_colors = (theme_color1, theme_color), highlight_colors = (theme_color, theme_color)),sg.Text('Enable debug mode', size = (35, None), justification = 'right', text_color = '#D0D0D0', tooltip = 'Developer only!'), sg.Checkbox('', tooltip = 'Developer only!', default = debug, key = '-ERRTOGGLE-', text_color = '#D0D0D0', enable_events = True)]] 
            
        window_about = sg.Window('About', layout_about, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_about, values_about = window_about.read()
            if event_about == 'Changelog':
                layout_changes = [[sg.Multiline(size=(75,20), key='-CHANGELOG-', write_only = True, autoscroll = False, do_not_clear = True, text_color = theme_color, background_color = theme_color1)],
                                  [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]
                window_changes = sg.Window("What's new?", layout_changes, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
                
                if os.path.exists(changelog_path) == True:
                    f =  open(changelog_path, "r")
                    clog = f.read()
                    window_changes['-CHANGELOG-'].print(clog)
                    window_changes['-CHANGELOG-']. set_vscroll_position(0)
                    f.close()
                else:
                    window_changes['-CHANGELOG-'].print('')
                    window_changes['-CHANGELOG-'].print('autogui_changelog.txt not found!')
                    window_changes['-CHANGELOG-'].print('Sorry!')
                    window_changes['-CHANGELOG-'].print('')
                while True:
                    event_changes, values_changes = window_changes.read()    
                    if event_changes == sg.WIN_CLOSED or event_changes == 'Okay':
                        window_changes.close()
                        layout_changes = None
                        window_changes = None
                        gc.collect()
                        break
            
            if event_about == 'License information':
                layout_license = [[sg.Multiline(size=(75,20), key='-LICENSE-', write_only = True, autoscroll = False, do_not_clear = True, text_color = theme_color2, background_color = theme_color1)],
                                  [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]
                window_license = sg.Window("GPL-3.0-or-later", layout_license, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
                
                if os.path.exists(license_path) == True:
                    f =  open(license_path, "r")
                    lic = f.read()
                    window_license['-LICENSE-'].print(lic)
                    window_license['-LICENSE-']. set_vscroll_position(0)
                    f.close()
                else:
                    window_license['-LICENSE-'].print('')
                    window_license['-LICENSE-'].print('COPYING not found!')
                    window_license['-LICENSE-'].print('Sorry!')
                    window_license['-LICENSE-'].print('')
                while True:
                    event_license, values_license = window_license.read()    
                    if event_license == sg.WIN_CLOSED or event_license == 'Okay':
                        window_license.close()
                        layout_license = None
                        window_license = None
                        gc.collect()
                        break
            
            # Activate debugging
            if event_about == '-ERRTOGGLE-' and values_about['-ERRTOGGLE-'] == True:
                debug = True
            if event_about == '-ERRTOGGLE-' and values_about['-ERRTOGGLE-'] == False:
                debug = False
            
            if event_about == sg.WIN_CLOSED or event_about == 'Okay':
                window_about.close()
                gc.collect()
                break

    #Edit personal settings
    slider_disabled = True
    col1_true = True
    col2_true = col3_true = col4_true = col5_true = col6_true = col7_true = False
    if theme_color == color_option_1:
        col1_true = True 
        col2_true = col3_true = col4_true = col5_true = col6_true = col7_true = False
    elif theme_color == color_option_2:
        col2_true = True 
        col1_true = col3_true = col4_true = col5_true = col6_true = col7_true = False
    elif theme_color == color_option_3:
        col3_true = True
        col1_true = col2_true = col4_true = col5_true = col6_true = col7_true = False
    elif theme_color == color_option_4:
        col4_true = True
        col1_true = col2_true = col3_true = col5_true = col6_true = col7_true = False
    elif theme_color == color_option_5:
        col5_true = True 
        col1_true = col2_true = col3_true = col4_true = col6_true = col7_true = False
    elif theme_color == color_option_6:
        col6_true = True 
        col1_true = col2_true = col3_true = col4_true = col5_true = col7_true = False  
    else:
        col7_true = True 
        col1_true = col2_true = col3_true = col4_true = col5_true = col6_true = False
        slider_disabled = False                   

    if event == '-MENU-' and values['-MENU-'] == "Preferences":
        layout_personal_settings = [[sg.Text('Edit your personal settings', font = ("Arial 12"), text_color= theme_highlight_color ,size=(40,1))],
                            [sg.HorizontalSeparator()],
                            [sg.Frame(layout=[
                            [sg.Col([    
                            [sg.Checkbox("Use dark theme", key = '-DARKTHEME-', default= dark_theme, enable_events = True)],
                            [sg.HorizontalSeparator()],
                            [sg.Text('Highlight presets:',size=(27,1))],
                            [sg.Radio("1", 'HCOL', key = '-HCOL1-', size = (21, None), default = col1_true, enable_events = True, tooltip = color_option_1, background_color= color_option_1)],
                            [sg.Radio("2", 'HCOL', key = '-HCOL2-', size = (21, None), default = col2_true, enable_events = True, tooltip = color_option_2, background_color= color_option_2)],
                            [sg.Radio("3", 'HCOL', key = '-HCOL3-', size = (21, None), default = col3_true, enable_events = True, tooltip = color_option_3, background_color= color_option_3)],
                            [sg.Radio("4", 'HCOL', key = '-HCOL4-', size = (21, None), default = col3_true, enable_events = True, tooltip = color_option_4, background_color= color_option_4)],
                            [sg.Radio("5", 'HCOL', key = '-HCOL5-', size = (21, None), default = col5_true, enable_events = True, tooltip = color_option_5, background_color= color_option_5)],
                            [sg.Radio("6", 'HCOL', key = '-HCOL6-', size = (21, None), default = col6_true, enable_events = True, tooltip = color_option_6, background_color= color_option_6)],
                            [sg.HorizontalSeparator()],
                            [sg.Radio("Custom highlight:", 'HCOL', key = '-HCOL7-', size = (16, None), default = col7_true, enable_events = True, tooltip = 'Custom color')],
                            [sg.Text('R:'), sg.Slider(range = (0,255), default_value = (theme_color_rgb[0]), resolution = (5), key = '-RSLIDER-', orientation = 'horizontal', size = (16, 10), trough_color= "red", disabled = slider_disabled, enable_events = True)],
                            [sg.Text('G:'), sg.Slider(range = (0,255), default_value = (theme_color_rgb[1]), resolution = (5), key = '-GSLIDER-', orientation = 'horizontal', size = (16, 10), trough_color= "green", disabled = slider_disabled, enable_events = True)],
                            [sg.Text('B:'), sg.Slider(range = (0,255), default_value = (theme_color_rgb[2]), resolution = (5), key = '-BSLIDER-', orientation = 'horizontal', size = (16, 10), trough_color= "blue", disabled = slider_disabled, enable_events = True)],
                            [sg.Text('Ensure that background\nis suitable for both:')],
                            [sg.Text('dark text', key = '-DARKFIELD-', text_color = dark_theme_color, background_color= theme_color, justification = 'center', size = (11,1)), sg.Text('light text', key = '-LIGHTFIELD-', text_color = light_theme_color, background_color= theme_color, justification = 'center', size = (11,1))],
                            ],
                            size = (185, 500))]],
                            title = "Theme", title_color=theme_color, relief=sg.RELIEF_GROOVE),
                            sg.Frame(layout=[
                            [sg.Col([ 
                            [sg.Text('Default data storage path:',size=(26,1))],
                            [sg.InputText(default_text=inpath,key='-INROOT-',size=(46,1)),sg.FolderBrowse(initial_folder = inpath, button_text = 'Browse', tooltip = 'Default root folder for input files', target = '-INROOT-', size = (5,1))],
                            [sg.Text('Default output path:',size=(20,1))],
                            [sg.InputText(default_text=outpath,key='-OUTROOT-',size=(46,1)), sg.FolderBrowse(initial_folder = outpath, button_text = 'Browse', tooltip = 'Default root folder for output files', target = '-OUTROOT-', size = (5,1))],
                            [sg.Text('')],
                            [sg.Text('Subfolders to make:',size=(20,1))],
                            [sg.InputText(default_text=preplist,key='-PREPLIST-',size=(60,1))],
                            [sg.Checkbox("Make subfolders in CLASSIC mode", key = '-CLASSICFOLDER-', default= prepfolder_classic, enable_events = True)], 
                            [sg.Checkbox("Make subfolders in BATCH mode", key = '-BATCHFOLDER-', default= prepfolder_batch, enable_events = True)],
                            [sg.Text('')],
                            [sg.Checkbox('Enable "screen" for detached execution of BATCH mode', key = '-USESCREEN-', default= use_screen, enable_events = True, text_color = '#D0D0D0', tooltip= 'Do not deactivate this unless you have problems\nwith running AutoGUI Batch via "screen".')],
                            [sg.Text('')]],
                            size = (410, 500))]], 
                            title = "Settings", title_color=theme_color, relief=sg.RELIEF_GROOVE)],
                            [sg.HorizontalSeparator()],
                            [sg.Button('Save & Apply', key = '-SAVEAPPLY-',enable_events = True, tooltip = 'Save your preferences and apply theme.'), sg.Button('Restore Defaults', key = '-RESTOREDEFAULTS-',enable_events = True, tooltip = "Revert to AutoGUI's default settings."), sg.Button('Cancel')]]
        
        window_personal_settings = sg.Window('Make it yours', layout_personal_settings, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))

        while True:
            event_personal_settings, values_personal_settings = window_personal_settings.read()
            if event_personal_settings == sg.WIN_CLOSED or event_personal_settings == 'Cancel':
                window_personal_settings.close()
                #layout_personal_settings = None
                #window_personal_settings = None
                gc.collect()
                break

            if event_personal_settings == '-HCOL1-':
                temp_color = color_option_1
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)
            if event_personal_settings == '-HCOL2-':
                temp_color = color_option_2
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)
            if event_personal_settings == '-HCOL3-':
                temp_color = color_option_3
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)  
            if event_personal_settings == '-HCOL4-':
                temp_color = color_option_4
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)
            if event_personal_settings == '-HCOL5-':
                temp_color = color_option_5
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)
            if event_personal_settings == '-HCOL6-':
                temp_color = color_option_6
                temp_color_rgb = hex_to_rgb(temp_color)
                window_personal_settings['-RSLIDER-'].update(value = temp_color_rgb[0], disabled = True)
                window_personal_settings['-GSLIDER-'].update(value = temp_color_rgb[1], disabled = True)  
                window_personal_settings['-BSLIDER-'].update(value = temp_color_rgb[2], disabled = True)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color) 
            if event_personal_settings == '-HCOL7-':
                window_personal_settings['-RSLIDER-'].update(disabled = False)
                window_personal_settings['-GSLIDER-'].update(disabled = False)  
                window_personal_settings['-BSLIDER-'].update(disabled = False)

            if (event_personal_settings == '-RSLIDER-') or (event_personal_settings =='-GSLIDER-') or (event_personal_settings =='-BSLIDER-'):
                temp_color_rgb = [int(values_personal_settings['-RSLIDER-']),int(values_personal_settings['-GSLIDER-']), int(values_personal_settings['-BSLIDER-'])]
                temp_color = rgb_to_hex(temp_color_rgb)
                window_personal_settings['-DARKFIELD-'].update(background_color = temp_color)
                window_personal_settings['-LIGHTFIELD-'].update(background_color = temp_color)                                                  

            if event_personal_settings == '-SAVEAPPLY-':
                if values_personal_settings['-HCOL1-'] == True:
                    theme_highlight_color = color_option_1
                if values_personal_settings['-HCOL2-'] == True:
                    theme_highlight_color = color_option_2
                if values_personal_settings['-HCOL3-'] == True:
                    theme_highlight_color = color_option_3
                if values_personal_settings['-HCOL4-'] == True:
                    theme_highlight_color = color_option_4
                if values_personal_settings['-HCOL5-'] == True:
                    theme_highlight_color = color_option_5
                if values_personal_settings['-HCOL6-'] == True:
                    theme_highlight_color = color_option_6
                if values_personal_settings['-HCOL7-'] == True:
                    temp_color_rgb = [int(values_personal_settings['-RSLIDER-']),int(values_personal_settings['-GSLIDER-']), int(values_personal_settings['-BSLIDER-'])]
                    temp_color = rgb_to_hex(temp_color_rgb)
                    theme_highlight_color = temp_color   

                if values_personal_settings['-DARKTHEME-'] == True:
                    dark_theme = True
                    theme_color = theme_highlight_color                    # theme highlight color
                    theme_color1 =  dark_theme_color                       # theme background color
                    theme_color2 = 'white'                                 # theme text color
                    theme_color3 = '#2b2a32'                               # theme button and input text color
                if values_personal_settings['-DARKTHEME-'] == False:
                    dark_theme = False
                    theme_color = theme_highlight_color                   # theme highlight color
                    theme_color1 = light_theme_color                      # theme background color
                    theme_color2 = 'black'                                # theme text color
                    theme_color3 = 'white'                                # theme button and input text color

                inpath = values_personal_settings['-INROOT-']
                outpath = values_personal_settings['-OUTROOT-']
                preplist = values_personal_settings['-PREPLIST-']
                prepfolder_classic = values_personal_settings['-CLASSICFOLDER-']
                prepfolder_batch = values_personal_settings['-BATCHFOLDER-']
                use_screen = values_personal_settings['-USESCREEN-']

                sg.theme_background_color(theme_color1)
                sg.theme_text_color(theme_color2)
                sg.theme_text_element_background_color(theme_color1)
                sg.theme_element_background_color(theme_color1)
                sg.theme_button_color((theme_color3, theme_color)) 
                sg.theme_input_text_color(theme_color3)
                sg.theme_input_background_color(theme_color)
                sg.theme_slider_color(theme_color)
                sg.theme_progress_bar_color((theme_color, '#D0D0D0'))
            
                save_preferences(dark_theme, theme_highlight_color, prepfolder_classic, prepfolder_batch, preplist, inpath, outpath, use_screen)
                sg.popup('Preferences saved & applied.\nA restart of AutoGUI might be required for all settings to take effect.')
                window_personal_settings.close()
                #layout_personal_settings = None
                #window_personal_settings = None
                gc.collect()
                break
                
            if event_personal_settings == '-RESTOREDEFAULTS-':    
                if sg.popup_yes_no("Are you sure to revert your personal preferences to AutoGUI's default settings?") == 'Yes':
                    print('removing config.')

    # Search for previous results

    if event == '-MENU-' and values['-MENU-'] == "Load and export results":
        classicresults = True
        batchresults = True
        layout_findconfig = [[sg.Frame(layout=[
                                [sg.Col([
                                    [sg.Col([[sg.Text('Log-type(s) to search:',size=(27,1))],
                                    [sg.Checkbox("Classic", key = '-CLASSICRESULTS-', default= classicresults)], 
                                    [sg.Checkbox("Batch", key = '-BATCHRESULTS-', default= batchresults)],
                                    [sg.Text('')],
                                    [sg.Button('Search', highlight_colors = (theme_color, theme_color)), sg.Button('Defaults', tooltip = 'Reset to default values. (home-folder, max. 20 logs)', highlight_colors = (theme_color, theme_color))]
                                    ], size = (220, 160)),
                                    sg.Col([[sg.Text('Search path root:',size=(20,1))],
                                    [sg.InputText(default_text=find_path,key='-LOGROOT-',size=(33,1))],
                                    [sg.Text("Processing results to recover:"), sg.InputText(default_text=find_number,key='-LOGMAXNUM-',size=(6,2))],
                                    [sg.Text('')],
                                    [sg.Text('')] 
                                    ], size = (230, 160)),
                                    sg.Col ([[sg.Text('')],
                                    [sg.FolderBrowse(initial_folder = find_path, button_text = 'Browse', tooltip = 'Speed up things by narrowing down the file-tree for log-file search', target = '-LOGROOT-', size = (5,1))],
                                    [sg.Text('')],
                                    [sg.Text('')],
                                    [sg.Button('Close', highlight_colors = (theme_color, theme_color))]], size = (70, 160))]
                                ], size = (555, 165))]
                            ], title='Search for previous results',title_color=theme_color, relief=sg.RELIEF_GROOVE, vertical_alignment ="center")],
                            [sg.Frame(layout=[
                                [sg.Col([
                                    [sg.Table(table_values, ['Date','Type','Path'], num_rows=10,  def_col_width = 10, auto_size_columns = True, max_col_width = 50, enable_events= True, font = "Helvetica 9", justification = "left", key = '-RESULTSTABLE-' )],
                                    [sg.Button('Show selected result', key = '-SHOWRES-', disabled = True), sg.Button('Export results as CSV', key = '-EXPORTCSV-', disabled = True), sg.Button('Export results as HTML', key = '-EXPORTHTML-', disabled = True)]
                                ], size = (555, 250))]
                            ], title='Table of found results',title_color=theme_color, relief=sg.RELIEF_GROOVE, vertical_alignment ="center")],
                            [sg.StatusBar('\u2691  Ready.', key = '-STATUSBAR-', size = (60,1), font = ("Arial 8"))]
                            ]           
        window_findconfig = sg.Window('Find results', layout_findconfig, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        #time.sleep(0.10)
        window_findconfig['-RESULTSTABLE-'].update(values = [])

        while True:
            event_findconfig, values_findconfig = window_findconfig.read()
            if event_findconfig == sg.WIN_CLOSED or event_findconfig == 'Close':
                window_findconfig.close()
                #layout_findconfig = None
                #window_findconfig = None
                gc.collect()
                break
            if event_findconfig == 'Defaults':
                defaultsearchpath = os.path.expanduser('~')
                window_findconfig['-LOGROOT-'].update(defaultsearchpath)
                window_findconfig['-LOGMAXNUM-'].update('20')
                find_number = values_findconfig['-LOGMAXNUM-']
            if event_findconfig == 'Search':
                find_path = values_findconfig['-LOGROOT-']
                find_number = values_findconfig['-LOGMAXNUM-']
                classicresults = values_findconfig['-CLASSICRESULTS-']
                batchresults = values_findconfig['-BATCHRESULTS-']
                if classicresults == False and batchresults == False:
                    classicresults = True
                    batchresults = True
                    window_findconfig['-CLASSICRESULTS-'].update(True)
                    window_findconfig['-BATCHRESULTS-'].update(True)
                stat = 'Searching for up to ' + find_number + ' results. Please wait...'
                print(stat)
                window_findconfig['-STATUSBAR-'].update(stat)
                window_findconfig.refresh()
                found_results = get_results(classicresults,batchresults,find_path,find_number)
                if len(found_results) > 0:
                    stat = 'Found ' + str(len(found_results)) + ' results from previous jobs.'
                    print(stat)
                    window_findconfig['-STATUSBAR-'].update(stat)
                    table_values = []
                    for found_result in found_results:
                        table_values.append(found_result)
                    window_findconfig['-RESULTSTABLE-'].update(values = table_values)
                    window_findconfig['-SHOWRES-'].update(disabled = False)
                    window_findconfig['-EXPORTCSV-'].update(disabled = False)
                    window_findconfig['-EXPORTHTML-'].update(disabled = False)
                    window_findconfig.refresh()
                    #print(table_values)
                else:
                    stat = 'Found no results from previous jobs.'
                    print(stat)
                    window_findconfig['-STATUSBAR-'].update(stat)
                    table_values = []
                    window_findconfig['-RESULTSTABLE-'].update(values = [])
                    window_findconfig['-SHOWRES-'].update(disabled = True)
                    window_findconfig['-EXPORTCSV-'].update(disabled = True)
                    window_findconfig['-EXPORTHTML-'].update(disabled = True)
                    window_findconfig.refresh()
            
            # select stuff in table
            if event_findconfig == '-RESULTSTABLE-':
                try:
                    rowlist = values_findconfig['-RESULTSTABLE-'][0]
                    table_path = (table_values[rowlist][2])
                    window_findconfig['-STATUSBAR-'].update(table_path)
                except:
                    #print("Something went wrong...")
                    print("")

            # open selected result in browser        
            if event_findconfig == '-SHOWRES-':
                browser_target = os.path.join(find_path, table_path.strip("./"))
                print(find_path)
                print(table_path)
                print(browser_target)
                browser_path = re.split("/", browser_target)
                if len(browser_path) > 7:
                    while len(browser_path) > 7:
                        del browser_path[0]
                    browser_path.insert(0,"...")    
                browser_t_short = "/".join(browser_path)    
                stat = 'Opening ' + browser_t_short + ' in webbrowser.'
                print(stat)  
                window_findconfig['-STATUSBAR-'].update(stat)
                open_browser(browser, browser_target)
                
            #export results table as CSV
            if event_findconfig == '-EXPORTCSV-':
                layout_export_csv = [[sg.Text('Export found results as CSV')],
                                [sg.InputText(default_text=find_path,key='-EXPORTPATH-',size=(36,1)), sg.FolderBrowse(initial_folder = find_path, button_text ='Browse', tooltip = 'Export table contents', target = '-EXPORTPATH-', size = (5,1))],
                [sg.Text('Filename:'), sg.InputText(default_text='AutoPROC_results',key='-EXPORTNAME-',size=(17,1)), sg.Button("Save"), sg.Button("Close")]] 

                window_export_csv = sg.Window('Export results', layout_export_csv, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))

                while True:
                    event_export_csv, values_export_csv = window_export_csv.read()
                    if event_export_csv == sg.WIN_CLOSED or event_export_csv == 'Close':
                        window_export_csv.close()
                        layout_export_csv = None
                        window_export_csv = None
                        gc.collect()
                        break
                    exportextension = '.csv' 
                    exportname = re.sub("\s", "_", values_export_csv['-EXPORTNAME-'])
                    filetoexport = os.path.join(values_export_csv['-EXPORTPATH-'],(exportname + exportextension))
                    if os.path.exists(values_export_csv['-EXPORTPATH-']) == False:
                        sg.Popup("ERROR: Invalid path!")
                    elif os.path.exists(filetoexport) == True:
                        sg.Popup("ERROR: File already exists!")
                    else:    
                        export_results('.csv', values_export_csv['-EXPORTPATH-'],filetoexport, find_path, table_values, theme_color, theme_color1, theme_color2, include_commandline, exclude_failed, logtitle)
                        stat = "Wrote " + filetoexport
                        window_findconfig['-STATUSBAR-'].update(stat)
                        window_export_csv.close()
                        layout_export_csv = None
                        window_export_csv = None
                        gc.collect()
                        break

            #export results table as HTML
            if event_findconfig == '-EXPORTHTML-':
                layout_export_html = [[sg.Text('Export found results as HTML with'), sg.Combo(("relative links", "absolute links"), default_value = "relative links", key = "-SELECTEXPORT-", size = (16,1), readonly = True, change_submits = True, enable_events = True), sg.Checkbox('Enforce light color scheme', key = '-LIGHTSCHEME-', default = False, tooltip = "If using dark theme, make sure that report stays printer friendly")],
                [sg.Text('Title:', size = (10,1)), sg.InputText(default_text='Found AutoGUI Logs',key='-EXPORTTITLE-',size=(17,1)), sg.Checkbox('Include autoPROC command line', key = '-INCLAPCOM-', default = False), sg.Checkbox('Exclude failed runs', key = '-EXCLFAILED-', default = False)],
                [sg.Text('Filename:', size = (10,1)), sg.InputText(default_text='AutoPROC_results',key='-EXPORTNAME-',size=(17,1)),sg.InputText(default_text=find_path,key='-EXPORTPATH-',size=(42,1)), sg.FolderBrowse(initial_folder = find_path, button_text ='Browse', tooltip = 'Export results as HTML document', target = '-EXPORTPATH-', size = (5,1))],
                [sg.Button("Save"), sg.Button("Close")]] 

                window_export_html = sg.Window('Export results', layout_export_html, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))

                while True:
                    event_export_html, values_export_html = window_export_html.read()
                    if event_export_html == sg.WIN_CLOSED or event_export_html == 'Close':
                        window_export_html.close()
                        layout_export_html = None
                        window_export_html = None
                        gc.collect()
                        break
                    if event_export_html =='Save':
                        exportextension = '.html'  
                        include_commandline = values_export_html['-INCLAPCOM-'] 
                        exclude_failed = values_export_html['-EXCLFAILED-'] 
                        logtitle = values_export_html['-EXPORTTITLE-'] 
                        exportname = re.sub("\s", "_", values_export_html['-EXPORTNAME-'])
                        filetoexport = os.path.join(values_export_html['-EXPORTPATH-'],(exportname + exportextension))
                        if os.path.exists(values_export_html['-EXPORTPATH-']) == False:
                            sg.Popup("ERROR: Invalid path!")
                        elif os.path.exists(filetoexport) == True:
                            sg.Popup("ERROR: File already exists!")
                        else:
                            if values_export_html['-LIGHTSCHEME-'] == True:
                                export_results(values_export_html['-SELECTEXPORT-'], values_export_html['-EXPORTPATH-'],filetoexport, find_path, table_values, theme_color, 'white', 'black', include_commandline, exclude_failed, logtitle)
                            else:       
                                export_results(values_export_html['-SELECTEXPORT-'], values_export_html['-EXPORTPATH-'],filetoexport, find_path, table_values, theme_color, theme_color1, theme_color2, include_commandline, exclude_failed, logtitle)
                            stat = "Wrote " + filetoexport
                            layout_open_html_list= [[sg.Text(stat)],
                                                    [sg.Text("Open now?")],
                                                    [sg.Button("Yes"), sg.Button("No")]]
                            window_open_html_list = sg.Window('Export results', layout_open_html_list, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
                            while True:
                                event_open_html_list, values_open_html_list= window_open_html_list.read()
                                if event_open_html_list == sg.WIN_CLOSED or event_open_html_list == 'No':
                                    window_open_html_list.close()
                                    layout_open_html_list = None
                                    window_open_html_list = None
                                    gc.collect()
                                    break
                                if event_open_html_list == 'Yes':
                                    stat = 'Opening ' + filetoexport + ' in webbrowser.'
                                    print(stat)  
                                    window_findconfig['-STATUSBAR-'].update(stat)
                                    browser_target = filetoexport
                                    open_browser(browser, browser_target)
                                    window_open_html_list.close()
                                    layout_open_html_list = None
                                    window_open_html_list = None
                                    gc.collect()
                                    break
                            window_findconfig['-STATUSBAR-'].update(stat)
                            window_export_html.close()
                            layout_export_html = None
                            window_export_html = None
                            gc.collect()
                            break            

    # kill screen session
    if event == '-MENU-' and values['-MENU-'] == "Kill previous batch job":
        screenargs = screen_info()
        foundscreens = []
        if len(screenargs) == 0 or len(screenargs[0]) != 3:
            foundscreens = []
            found_msg = 'No active sessions'
            found_disabled = True
            #print(screenargs[0])
        else:
            for screenarg in screenargs:
                #print(screenarg)
                screenfound = (screenarg[1]).strip()
                foundscreens.append(screenfound)
            found_msg = 'Select session'
            found_disabled = False 
        layout_kill = [[sg.Text("\u2620  Select session ID to kill:  \u2620", justification = "center")],
                       [sg.Combo((foundscreens),default_value= found_msg, key = '-KILLID-', size = (24, None), readonly = True, disabled = found_disabled, tooltip = 'Select "screen" session to nuke.')],
                       [sg.Button('Kill', tooltip = 'Fire', button_color = 'white on red', disabled = found_disabled), sg.Button('Cancel')]]
        window_kill= sg.Window('The Football \u2620', layout_kill, no_titlebar=False, alpha_channel=1, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_kill, values_kill = window_kill.read()
            if event_kill == sg.WIN_CLOSED or event_kill == 'Cancel':
                window_kill.close()
                layout_kill = None
                window_kill = None
                gc.collect()
                time.sleep(1)
                break
            if event_kill == 'Kill':
                window_kill.close()
                layout_kill = None
                window_kill = None
                gc.collect()                
                screenid = values_kill['-KILLID-']
                kill_command = 'screen -S ' + screenid + ' -X quit'
                os.system(kill_command)
                stat = 'Terminated screen: ' + screenid
                print(stat)
                time.sleep(1)
                break

    # Reattach screen session                    
    if event == '-MENU-' and values['-MENU-'] == "Connect to running batch job":
        screenargs = screen_info()
        foundscreens = []
        if len(screenargs) == 0 or len(screenargs[0]) != 3:
            foundscreens = []
            found_msg = 'No active sessions'
            found_disabled = True
            #print(screenargs[0])
        else:
            for screenarg in screenargs:
                #print(screenarg)
                screenfound = (screenarg[1]).strip()
                foundscreens.append(screenfound)
            found_msg = 'Select session'
            found_disabled = False              
        layout_screen = [[sg.Text("Select session ID to reconnect:", justification = "center")],
                         [sg.Combo((foundscreens),default_value= found_msg, key = '-SCREENID-', size = (24, None), readonly = True, disabled = found_disabled, tooltip = 'Select active screen session to reconnect.')], 
                         [sg.Button('Connect', tooltip = 'Reattach screen', disabled = found_disabled), sg.Button('Cancel')]]
        window_screen= sg.Window('Reattach screen', layout_screen, no_titlebar=False, alpha_channel=1, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_screen, values_screen = window_screen.read()
            if event_screen == sg.WIN_CLOSED or event_screen == 'Cancel':
                window_screen.close()
                layout_screen = None
                window_screen = None
                gc.collect()
                break
            if event_screen == 'Connect':
                screenid = values_screen['-SCREENID-'].strip()
                window_screen.close()               
                window.close()
                #layout_screen = None
                #window_screen = None
                #layout = None
                #window = None
                gc.collect()
                connect_command = 'screen -r -x ' + screenid
                if sys.platform == 'darwin':
                    screen_popup_msg = ('Reconnecting to a session is currently not supported on MacOS.\nPlease type the following line into your terminal:\n\n' + connect_command + '\n')
                    sg.popup(screen_popup_msg, title = "Attention Mac users!")
                    print('')
                    print('=======================================================')
                    print('')
                    print("Reconnecting to a session is currently not supported on MacOS.")
                    print('Please copy the following line into your terminal:')
                    print('')
                    print(connect_command)
                    print('')
                    print('=======================================================')
                    print('')
                else:    
                    os.system(connect_command)
                break                    

    # quit
    if event == sg.WIN_CLOSED or (event == '-MENU-' and values['-MENU-'] == 'Quit'):
        window.close()
        #layout = None
        #window = None
        gc.collect()
        break

    # Run classic AutoGUI in console
    if event == '-CLASSIC-':
        task = 'classic'
        window.close()
        #layout = None
        #window = None
        gc.collect()
        break

    # Run batch mode in screen
    if event == '-BATCH-':
        task = 'batch'
        window.close()
        #layout = None
        #window = None
        gc.collect()        
        break    

if task == 'classic':
    print('')
    print('Starting AutoGUI in CLASSIC mode for single dataset processing.')
    print('')
    if debug == True:
        classic_command = sys.executable + ' ' + classic_path + ' debug | tee autogui.debug.log 2>&1'
    else:
        classic_command = sys.executable + ' ' + classic_path
    os.system(classic_command)
    
elif task == 'batch':
    print('')
    print('Starting AutoGUI in BATCH mode for multi dataset processing.')
    print('')
    if use_screen != True:
        if debug == True:
            batch_command = sys.executable + ' ' + batch_path + ' ' + "dummy_screen_id" + ' debug | tee autogui.debug.log 2>&1'
        else:
            batch_command = sys.executable + ' ' + batch_path
    else:        
        n = 1
        m = n
        user = pwd.getpwuid(os.getuid()).pw_name
        while True:
            sessionid = "autogui_" + user + "_" + str(n)
            check_screen_command = 'screen -ls'
            screencheck = re.compile("[0-9]*\.?"+ sessionid)
            check_screen = subprocess.Popen(check_screen_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
            output = (check_screen.stdout.readlines())
            m = n
            for line in output:
                line = line.strip()
                if screencheck.search(line) != None:
                    print(line)
                    n += 1
            if m == n:
                print('')
                print('screen session id is:', sessionid)
                print('')
                if sys.platform == 'darwin':
                    screen_popup_msg = ('MacOS currently prevents "screen" from starting attached.\nTo be able to see the terminal output from AutoGUI Batch,\nplease type the following line into your terminal:\n\nscreen -r -x ' + sessionid + '\n\nRunning AutoGUI Batch with its "screen" attached also\nprevents browser windows from closing automatically,\nif the browser was launched directly from the AutoGUI Batch process.')
                    sg.popup(screen_popup_msg, title = "Attention Mac users!")
                    print('=======================================================================')
                    print('')
                    print('***** ATTENTION *****')
                    print('')
                    print('MacOS currently prevents "screen" from starting attached.')
                    print('To be able to see the terminal output from AutoGUI Batch,')
                    print('please copy this into your terminal:')
                    print('')
                    print("screen -r -x ", sessionid)
                    print('')
                    print('Running AutoGUI Batch with its "screen" attached also')
                    print('prevents browser windows from closing automatically,')
                    print('if the browser was launched directly from the AutoGUI Batch process.')
                    print('')
                    print('=======================================================================')
                    print('')
                break  
        if sys.platform == 'darwin':                   
            if debug == True:
                batch_command = 'screen -dmS ' + sessionid + ' ' + sys.executable + ' ' + batch_path + ' ' + sessionid + ' debug | tee autogui.debug.log 2>&1'
            else:
                batch_command = 'screen -dmS ' + sessionid + ' ' + sys.executable + ' ' + batch_path + ' ' + sessionid
        else:
            if debug == True:
                batch_command = 'screen -S ' + sessionid + ' ' + sys.executable + ' ' + batch_path + ' ' + sessionid + ' debug | tee autogui.debug.log 2>&1'
            else:
                batch_command = 'screen -S ' + sessionid + ' ' + sys.executable + ' ' + batch_path + ' ' + sessionid        
    os.system(batch_command)  

else:
    print('')
    print('Closing.')
    print('')