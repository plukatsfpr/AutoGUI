# This file is part of AutoGUI.
# Copyright 2025 Peer Lukat
# Peer.Lukat@helmholtz-hzi.de
# Helmholtz-Centre for Infection Research, Structure & Function of Proteins
#
#    AutoGUI is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#    AutoGUI is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with AutoGUI.  If not, see <http://www.gnu.org/licenses/>.


version = 'v.20250307'                             # current version
# DARWIN!

# Dependencies required:
# FreeSimpleGUI (pip install FreeSimpleGUI)
# psutil (pip install psutil)
# Working installation of GPhL AutoPROC (www.globalphasing.com/autoproc/)
# Working installation of CCP4i (www.ccp4.ac.uk)
# Working installation of Adxv for Image viewing (www.scripps.edu/tainer/arvai/adxv.html)


# Fallback configuration if config file can't be read
inpath = "/Data/"                           # change this to default in path
outpath = ""                                # change this to default out path
browser = "chromium"                        # path to/ command to start browser
batchprocs = "8"                            # number of processors available for batch processing run
adxvpath = "/software/bin/adxv"             # path to/ command to run Adxv
preplist = 'refine coot phaser xtriage autobuild pdb_deposit ccp4 pymol' # list of folders to create if "prepare folders" is checked. "autoproc" is required and will always be created automatically. "images" will be created if linking image files is enabled. "beamline_processed" will be created if linking of beamline-processed data is enabled and such data is found.
dark_theme = False                                    # use dark or light theme 
prepfolder_classic = True                             # prepare subfolders in classic mode?
prepfolder_batch = True                               # prepare subfolders in batch mode?

theme_highlight_color = '#458eaf'
dark_theme_color = '#2b2a32' 
light_theme_color = 'white'



import FreeSimpleGUI as sg
import time
import subprocess
import os
import threading
import psutil
import re
import sys
import shutil
import copy
import gc
import faulthandler

# icon
ag_64 = ''
ag_icon = b'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WHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6aXB0Y0V4dD0iaHR0cDovL2lwdGMub3JnL3N0ZC9JcHRjNHhtcEV4dC8yMDA4LTAyLTI5LyIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOnBsdXM9Imh0dHA6Ly9ucy51c2VwbHVzLm9yZy9sZGYveG1wLzEuMC8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6YWE1YmZkYTUtZGEzMy00OWI4LWI5ODktOGNjMWRhNWNhYjYxIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjdjMzZhMWRhLTZmMzEtNDU0My05ZGIxLWIzNzVmYWFmYTA2MyIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjQ1ODg3YWUxLTA0MTEtNDVkNy1iNDFlLWM4YjJjM2Q1ZjgwMCIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iTWFjIE9TIgogICBHSU1QOlRpbWVTdGFtcD0iMTY2MzMzOTE3MDAzNjYzNyIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjYiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBleGlmOkNvbG9yU3BhY2U9IjEiCiAgIGV4aWY6UGl4ZWxYRGltZW5zaW9uPSIyOTk5IgogICBleGlmOlBpeGVsWURpbWVuc2lvbj0iMTY4NyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgdGlmZjpSZXNvbHV0aW9uVW5pdD0iMiIKICAgdGlmZjpYUmVzb2x1dGlvbj0iMjI1IgogICB0aWZmOllSZXNvbHV0aW9uPSIyMjUiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPGlwdGNFeHQ6TG9jYXRpb25DcmVhdGVkPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6TG9jYXRpb25DcmVhdGVkPgogICA8aXB0Y0V4dDpMb2NhdGlvblNob3duPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6TG9jYXRpb25TaG93bj4KICAgPGlwdGNFeHQ6QXJ0d29ya09yT2JqZWN0PgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6QXJ0d29ya09yT2JqZWN0PgogICA8aXB0Y0V4dDpSZWdpc3RyeUlkPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6UmVnaXN0cnlJZD4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZmFmOTA0YWYtMmYyMC00MTg0LWI3ZjAtYWIxNzQxZGE2MzczIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKE1hYyBPUykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDktMTZUMTY6Mzk6MzArMDI6MDAiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogICA8cGx1czpJbWFnZVN1cHBsaWVyPgogICAgPHJkZjpTZXEvPgogICA8L3BsdXM6SW1hZ2VTdXBwbGllcj4KICAgPHBsdXM6SW1hZ2VDcmVhdG9yPgogICAgPHJkZjpTZXEvPgogICA8L3BsdXM6SW1hZ2VDcmVhdG9yPgogICA8cGx1czpDb3B5cmlnaHRPd25lcj4KICAgIDxyZGY6U2VxLz4KICAgPC9wbHVzOkNvcHlyaWdodE93bmVyPgogICA8cGx1czpMaWNlbnNvcj4KICAgIDxyZGY6U2VxLz4KICAgPC9wbHVzOkxpY2Vuc29yPgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+IMG9ZQAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAAimgAAIpoBvt37KgAAAAd0SU1FB+YJEA4nHeKdlGcAABbwSURBVHja7VtpdBTXlf6qq6q7el/U3ZK6taMdIbAQSAYBYrFZbBzbOMbByYkdEmeZzJyxjyeZiWcmM8cOjteZOJl4EgeCAcdOvOAYYxZjB2ywWY0BgQRoQRJaW2r1vlR1Vc0P/MrVWC1hx0vmHNc5fdSIVtW737v3u9+99zXw5fXl9eX1RVzXXXfddAAz1a+SkpKrNm7caP4810F91g84c+YM88gjjyx64YUXGu12eyPDMLUjtNlryS8FRVHgLHZQGg0SwTFIkojYyAC0w51BmqZPOhyOo5FI5O3ly5e/+etf/zr4/wqAysrKuaIorg1G418x1S1xWPNLYMjKBmexQ8OwE/6tLElIhscQGx1GqK8LUvtxxEb6Xmtqanru3nvvfbGhoSH2NwnA2bNncfPNN38zHo//WCydXZU9tR7m3AJoGBZWSkQBBxRYtMhzmGEz6WHSa6FjNAAAUaYQF0QkBREDYxFcGI3gXFDAYIqCLEmI+vrhO3sCscOvjc6aNes3U6dOfWzdunX+vxkA1qxZs2rfvn3rTHNuKM+eOgs6ix1OKoVpVg3qi90oyHXBYDBAp9OBZVlIkgSapiFJEmRZBkVdWorBYEAsFoMkSUgmk/CNBdHW58c7F/xoi0kQYhH4zp5A4vBr4aqykofuvPPOx1etWhX/wgC45pprPGfPnn1SLpt9Q/G8FdBZ7ChheCzIN2NGRRGysrLAMAyi0SgoikIqlYLJZAJFUcq/1T/NZjNaW1tRVFQEWZZB0zQoioIgCOjsHcDeswP4y1ACfCyCvmNvgWs/eH7lypXfW7du3ZufOwDNzc3Xdw6NbXItXm13lFTBSwu4rsSKGZUlsFqtoGkaqVQKNE2nP5SiIMsyJEmCRnMpBMjnOI5DJBKBLMtgGAY0TSse0tbWBofDAUGmse14F/YOxRAZuojhPX9EZY71oSeffPLfCwoK+M8FgBUrVjxwbFS4r/L6b8BoNOFaF4Vls6pgNpvBcRwoioIoioqxajcn7yVJUu6XSCRgt9shiiJ4nk/bfYqioNFoIIpiGiAnzndjw5EeXAxF0fnWq6imxg6sXbt21apVq4Y+UwDsdvtvbVdf950pC29EDitjzdQs1E2rBsteYvdAIACbzQZZlj9kdlmGKIrKjl8OgiRJsFqtSCQSSCaTitcQ0AhvUBSlcIdGo0EwEsWWt8/gL30h9B8/gNJwe/eKFSuav/vd7174TACYM2fOJn9e3TfyGhaiSifi67OLMaWkWNkZYjQxjKIoBINBdHZ2IhKJIBgMgud5xXitVguj0QiDwYDy8nLo9Xpl54kXAIBGo0n7PQAwDANJkiBJEl49fBabzwxi6PRR2Nv3X7zjjjsW3HnnnZ2fKgDTpk37TbJ8zl2Fc5Zihl7AN+dPhdvtVnZVvcPk36dPn8b3H3gCxoo6MJzhkksrhgCymLoEnCRirKsNdy+tx5IlS2A2m8EwjOIpGo0m7d4sy37Ei/a3dOIXh7sxdOowpgTaeu666675y5cv757IJuZjEN7dFzjPXaVXX4PpnIA7FtTA4XAoZCbLshKn5IpGo7jv4V8hf8XXoaEnf5S9sBxb/vA4ysrKUFRUBL1er+w8ATSVSoHjOCVrEC/TaDSYX1sKWQaeAHD2WKLgxRdffK21tXV2VVVVNNMz6Ssx/pZbbpnXFZb+UHDtrVSJDvj2/Epku92K0ZcbT9z05ZdfxkldATir4woZiULH+XOYNcULq9UKvV4PURTBsqySJdTkeHlWoSgKhdl26FNJdFA2HD72noseGyh/6623ns/0SM1ka9JoNIbDR45syWq+WZOlY7FmRi7cLpfikiTuCUERlxwZGcEjL70Ji7foY3GM0ZWLQCCQ5vo8zyvPoigKiUQCfr8fqVRKIVfyEwBW1JdjcYEDUxZ+Bc+9suuWjRs3fusTAzBz5syHbItvLzDaXfjqFCNqqqsUtr88LmVZRiqVgiAI2Lp1Kwqaln/sDMNZHBgeHkY0GkUqlVJILhAIKDuv0+nAMEyaB6g9QkNRuH1uJXKtZtgX3YqdO3f+4uTJk96PDUBhYWHVqMb8d+6qOjRZJcydWQuapsEwDDQajZKuyGIoigLLshgcHMTGwx0wONwfHwCrA9FoVNlVjuNA0zRsNluacDKZTGn8QLyFgGG3mPDDpgpY86fgYEBj2r59+6MfmwRdLtdDdNNKys5SWD1/OjwezxUZ8dhjjyF/9sJPJLB0ZhvE0S7YbDZ4vV7o9fpPrFQbp5Vhaccwko1LsHPn07ft3bv3v5ubmw9dEQCrV6+ue6s3vLLGW4SleTrkeT0QBEGJQ5KL1SpPlmW0tLTgld4E8uqtn2jRrMGErqNdGB0dRSQSUbhFLYrU79XKkKyJeIEsy1jVUI5dF0ZwIasCBw8e/E8Ay64IgPb29nvy5t8GGyVidkU+4vG4wsRE4qZSKcVVBUEAz/P4+aOPI2fGyowG9h3dB3NuYUZypLU6HDvXjY6ODpjNZlit1rRiyWAwQKvVKmsg4ceyrKISSZhIkgSHicPSQgf+HJiFffteWvr+++/XzJgxo2VCDrj//vudUYq71eotRmMWjdycnLSihej8eDwOURQhSRJ4nsfRo0dx3lgMRje+2/LRMC5s24D42PCEXqAtqEQymUQikYAoikgmk4quEAQBsVgMPM9DFEXEYjGlfhBFUfkbkpopisKSmgJwNidORrV49913vzcpCe7Zs+cmTUUDS2toNJR5FHYHAJ7nFeGj1WoVVxNFEU//cStclVdlNGzw5EFct2wp+EhoQgBM2V74fD6lL0B21mw2K4CnUimkUiloNBoIgqCkQPWayLqKsu2YYtYhZ9psdHZ2runv76cnBOD06dM32ArLUMIKyPfkKEiSB6hLWZIFdu3ahbHiWdAw40dVMjQGx8XjKC0tRWRkYGIitNjh9/sRCoWQSCSUDUilUojH44oYImk4kUgoXiiKogKSmheurciFJa8Yu3btsvf19V2bEYCNGzcyvN62yJDlxjSXHjqdThE3amTJApLJJEZHR7Fl59uwF5ZnNOri0X2YOnUqrFYrtMPdE4eA0YqRkRGEw2EEAgEkEgkIgqBwwOWltcFgAE3TYFlWMZ6E69mzZ0FRFEpzbGB0evhMeTh+/Pg1GQHYvHlzo7N2joGiNKjIdSgylCgxdaEjCAIEQcDu3buhnd4MSjO+rIiP+ZA71g632w2j0YjKgmxIKWECMWRDb28vent70dXVheHhYWVnScFFnp1MJtMU4eXrLCsrgyiKyHPZYKA1yCqrgc/nW5wRgGQyWW/KyYeRkpDrsiuKT51q1NVZKBTCL3cegsVTmNGgnoNvoLq6GmazGbIsw+FwgI9FMqdCoxmxWAyCIKCrqwstLS1pJTYxNJFIIB6PQ6fTKetR84I6I9AaDa722mDIyobf76/t7e3VjwtAa2trFWd1wEmLMJvNCrpqMiIhIYoitm7disK5yzIaE/X1o1T0wel0Qq/Xw+FwwGazgY9kbvNraAY+yqjIYa1Wi3g8DkmSlFBIpVLYsGEDBEFQ0rGaoEnThISKJEkodBjBWexoa2uD3++vHheAioqKGp3ZhmyOhl6vB8uyCrrEaEKA3d3deKFtBHq7M/Puv7Mb1dXVcDgc4DhOkbHCBB4AALqcQrAsC4fDgZKSEgV8kt5omsbq1athsVjSJLJWq1W0AakjSEjk2kzQGi3YuXMn4vH4tHEBOHLkiE5D08gy6hSjyQ2Ii5EiZdOmTfDUNWU0ItR/AdMMPBwOB5xOJ2w2G7RaLWw2GxKhsUmqQi8SiQQcDgdMJlNaA4R4ZXZ2NvR6fVrqI8XY5V0pANCyNCiahkTR8Pl8pnEBmD59epbWaIFJ+2ErKpFIKDfSarXQarVobW3FO3ELtEZLhvGOjP53d6OyshJ2ux02m025n8vlQmxkcOKiyOZAOBxWMg0xjnikVqtVNoh4JqlSyQYRQUQ+4zQbAADmoirE4/HicQEoLS0tBEWBZRlFU1+e+1OpFJ58aj1yps3OaECgtwOzsi/FPGmbURSFZDIJh8MxKQBaowWxWAwURUGv1yuVZjKZVEhY1bNQZgcajQYMwyjviQ0Mw4CUEiZPIVKp1PgeEI1GoyS/qomPMCpFUThy5Ag6rWWgtboMsz0RQwe2o7KyEk6nE2azGSzLgqYv8YokSai1aQBVuvooAGaEw2HwPK8YQ2KcTI1IRiBFEfEAQoKEM8jvyCVEw5mlcHd390WRTyIlSmlFCAGD53n812+fRlZ5bcbFj104h4YiF+x2O1wulxI2DMOA4zjE43FwHAc+Fs5MgiYrhn0+CIKgpDlisCzLyuyArI3EO9mkSzv+4TyB53lEEpe4IXChDQaDITEuAB0dHdFUIoZAUkzr9BCSef311xErvzpjk1MSU/AfeBVTpkyBzWaD3W6HxWJBMplUFJtWq0V2djZS8diE/cFBxqGQMJkp8jwPmqYVRUi4QC2NWZZVMoEoisoGhKKXRojC6AA4jusaF4C5c+cOpJIJ+KO84loE/WAwiMee+TPsBWUZ1+1vP40F08vhdruRk5MDnU4HSZKUNlY8HofNZkNZWRn4aHhCHjBkexEKhcDzvBIK6rmiOsbVPUkSHmS0RjJClBchxCOoqqqCxWKJZuKAc8lIEANJWSlESEy9+uqrMF21EKDGHyeIAo/E0V2oqKhATk4OTCYTdDodaJpW3NhkMkEURRgMBiSCoxMD4MhWKj2GYZS6hOy4emiiluhknqAezVEUhYv+MIToJQA4jjs5LgCSJL0XHe5Dv0AhEPywbO3v78fj29+FKSc/44J9bccxv74WNpsNLpcLFosFLMuCZVlwHAetVguapmEymeB2u5EIBSYEQG93IhgMKuKL9CLJmIzEN8kQ6rhXF0skM5waDCI25kN5eTmysrLaxu0IVVdXH3zlxBnkNyxG70gI2W4XZFnG5s2bUXD1koyLFfkkOnb9CbOWNaOnpwfJZFKJQ5qm05oa8XgcPp8Pcf/wpKkw2BNMEzZE9Kh3Vn3WQD1EUSvCGJ9CWyCO8EAPPFW17YWFhcFxAVi/fn1HcXFxrxCP5rf1j6G+Gujs7MRL7UEUzsnKzFk0jam3fh+nAJyKA7ggABiv4tNeeumtKLh6+qT9waGhIfA8j2AwqBAfMZSkaHWfkEyPiHYgV+eAH7Iso+/oPni+vmzvhD1Bp9P5aqj/wvffMRmwKh7H+g2/R+70qyceoNAMbAWln+o5I63RjBG/H+FwGDabDQzDpNUmRBQR1ye9QSKbSdVIURSOd/sQGx3Egpop8Hg8r03YEZoxY8Yrvtbj8IsUNrywHQdiJmiNn+vpNeUaMuSC4zh4vV7FeNKFMhqNSnok4Kgbo0rTRhDxSvsQ/J2tmDdvXszj8eye0AOeeuqpnQ0NDX3xsRHvr3b+CTW33IUv6jI4c8EwDJxOJ3Jzc9MY/0qvYyfaIQoCut/egfJVD75UVFQUnXQyFI1GHz/1/P/CW78ANKv9wgDQ27KU9lgymYQgCEgkEoouINUpqQLJe8IFCV7As0faEeg+j9uXN6O4uPg3VzQXaG5u3v7MX448llVSjS/y4mxZ6Ovrw8WLF8GyLAwGw7iHJ9TESEQQALzT1ouuQBQdb76MH/7oB4fr6+v3XxEAZ86c+VHpNbeAojNP0Me6zyHY0/5XGWgvroQ1r2TCUdloX5vS6lJXgOqfRCOo5XssKeDpo10Y7TiNG2ZVoaqq6j+uaDZYVlZWdRGWOwsnYPVUMg762A5867qlacUKAAiCoOyAuo64fMwViUSw8dCJCQFg9UYMDw8rYzkiavr7+2GxWGA0GtOm1MQzZFnGy0fOYygYQs+u5/BPP/u3NxsbG3dcEQB6vX6dafaSCY/PDJ8+hpVNjSguLkZeXp4yxFTP6dVzQ7Xbqvv2T+54Z0IPYTgD+od8aWWxJElwOp0fmUyTo3WyLOPkhSFsPTeEnoN78L01N/OVlZX/cEXT4UWLFjV1anNvzHZ7My5KiEWQ1XsMhXNXw+PxoLi4OK1lRXZbXYerjVefJpmXb8HYJGEybPIimUwqoKlTnPqUCnn2UCCCJ94+C3/HGUxJ9GHBgq89WFdXd/qKzgf09PQ8WtC4eMIFDZ48hIXNC+DxeJSKj9T76hf5nVarVRoipDQl+bukpGTSBqnRmYNgMKi0utQepa4INRoNInEeT+w5hcHhQYzu2oQ77rhjf01Nzf1XdELk+uuvX0PXLWvQWewZF5MMBzF84gDMdidcLhesVqvSr1NLz8sbFGqpqj7QUFRUhFQiNsmozIaxsTGFB9T3Vb9C0QQefu09tAz4cPLZ/8Hdf/+Di7W1tV/zeDzipACsX7+ePt7a/tPc2oYJF9N3bB8sBWXY1hEAT7HKzpLxFXFFIk/Ji6QscraPAOB2u5GcZFjKWRwIBALKWSECMOEbSZIQjiXx6K73cXJwBC0vrcd931kTa2pqurmmpubihBKevNm0adMP7E03lLMGU8YPx8dGkB/qQqr9PYR4EY+/cwEnO/uVsbS6P0+YWT1FIkdd1anMZrMhOUmLXGe2IRgMpj2DZBFJktA3GsJPtx3F8Z5+nHr+t7h71TWxefPmLZs5c+aRydKwQoJDY+F7PcvrJvxw76E3cPeNN8Jut+N36zegX8vhZxSD1RUhXF9fCq2qk0zIjpSp6smyuqubk5ODZGTiL4NoPjh3RKa/BDyj0YSD5/rwq0MdCA71o+3ZJ/CTH3470tTUtKKxsfHtK9EhDABcddVV08OFdQWZurwAEB7owYIcLbxeLyoqKg7fc/c/PrJly5bftQz2WJ8VF+K9gSDWzilHqdeZFvPjsbS6W2u32xH19U92gFBpe5P7+oJRPP12K94dCMDXdhz8gRfx85/c011XV7esvr6+7UqFGAMAlZWVF3YePNDD6LgPQCBkdimPR4b6MEMfx7yVK5GTkyObzeYf33TTTXt37Nhx9I033nj+98/8sj627Fb8cyiBxfl2fGXmFHiyPhxZERDG0wYcx2Ht/Fps2bsNnNWuGAx8cOZYFCG0n8Di6xeCYRgEogm8caYfm09dRCLoR8ebL2O+14ivPvDAtsrKym9MnTr1Y323SKHttra2pR0dHTv7+/uV8/okjen1elgsFjgcDuTk5DxcUVHxY4UU+/qYbdu23bdjx45/OZWy6vJmNUNnsWOBx4rFU/NQ6nGCpTVpu67OFuSozYkTJ9Dd3Y1IJJJ2/I4ckQskJAyJehyO0hD5JIZajkB+fzfWrl0bbGxsvGfevHkbPokUpy5rid+YSCRuS6VSebIsGz/4/7hGowmyLNup0+m2mkym193uj57/O3z4cPnu3bsf3LNnz809pgLkTGuA0eWBTUtjUZETNflOFLptsJv0SgyrFWM4HEYoFEIoFALLsghE4ugbDeH8UBAnhyMYkzVIJRPwd7Yhfmg7bl9zm9zY2PhUaWnpv1ZXV/s+aS3yqX9rbP/+/Q379++/t6Wl5ZbXTnbBO3M+LLkF0GdlX3J5mkKd2wKXiYPTxIGiPqgXQGE0EsNQKI4zIxH4+UtnkhKBUUSGLmKw5TAKxDGsXLkyUVtb+0xJScnDtbW15/7a9X5mX5traWnJO3HixNrOzs7VLS0tVS/uehPe2Ytgys6H3u4CzbLQmqxp4cBHwxD5JOLBUcR8Axg8dQhX5Tsxf/58FBcXv1tWVvacx+N5pqKiYvTTWudn/sXJDw5dFfX09Czt6emZ6/f7a3ierx0YGKB9Pl/aeQOj0Qiv1wun0xk3Go2nXC7X8dzc3LfcbvcbFRUVQ5/F2j4XAMbVFL29WbFYrDAajVJktG00GiWO487n5+dH8OX1+Vz/B+mjxi9ohWOlAAAAAElFTkSuQmCC'

# path to configuration file
config_path = os.path.join(os.path.dirname(__file__), 'autogui.cfg')
# path to changelog
changelog_path = os.path.join(os.path.dirname(__file__), 'autogui_changelog.txt')
# path to personal config
personal_config = os.path.join(os.path.expanduser('~'), ".autogui_priv.cfg") 
# path to GNU GENERAL PUBLIC LICENSE Version 3
license_path = os.path.join(os.path.dirname(__file__), 'COPYING')                         

welcome = "Welcome to AutoGUI " + version + " (BATCH-mode),\na python-based GUI for running GPhL autoPROC"
win_title = 'AutoGUI-BATCHelor ' + version
simple_title = win_title  


#Data structure for dataset items:
# 0  = dataset name                          (from find_images)
# 1  = source folder                         (from find_images)
# 2  = image template                        (from find_images)
# 3  = starting image                        (from find_images)
# 4  = ending image                          (from find_images)
# 5  = parent directory for data processing
# 6  = output path for dataset
# 7  = macro    --> Deprecated!
# 8  = flag
# 9  = command line arguments

#variables
cbflist = []
tmpcbffolder =''
cbffolder = ''
h52cbf = False
oldcutoffmode = False
runnumber = 1
separator = '==============================================================================================================================='
folder = ''
IDs = []
Template = ''
Start = ''
End = ''
setsweeps = ''
oldcntr = 0
datasets = []
previous_datasets = []
datadisplay = []
EIGER = True
killflag = True
ds_index = -1
paramslist = []
runflag = False
refresh = True
refresh_main = True
item_list = []
PID = ''
screenid = ''
screenstatus = ''
screen = False
kill_disabled = True
screenargs = []
debug = False
show_errors = False
reroute_out = True
datasaving = True
current_mode = "Fast"
modeselector = {"fast": False, "normal": True, "problematic": True}
silent = True
previous_failed = ['']
failed_processing = ['']
csv_header = ['Date', 'Dataset', 'Success', 'Space group', 'Cell dimensions [Å]', 'Cell angles [°]', 'Isotropic diffraction limit [Å]', 'Anisotropic diffraction limits [Å]', 'Autoproc command line']
csv_entry = [] # 0 = proc_date, 1 = image template, 2 = success, 3 = spacegroup, 4 = cell dimensions, 5 = cell angles, 6 = isotropic diff limit, 7 = anisotropic diff limits, 8 = command line for autoproc
csv_content = []
ds_name = ''
proc_date = ''
#rec_date = '' not implemented yet
old_cutoff_param = 'ScaleAnaISigmaCut_123="0.1:0.1 0.5:0.5 0.5:1.0 1.0:2.0" ScaleAnaRpimallCut_123="99.9999:99.9999 0.9:0.9 0.8:0.8 0.6:0.6" ScaleAnaCChalfCut_123="-1.0:-1.0 0.0:0.0 0.1:0.1 0.3:0.3"' # as used until autoPROCVersion20220608          
cleanup_args = '-not -name "*.html" -not -name "*.htm" -not -name "*.HTML" -not -name "*.png" -not -name "*.jpg" -not -name "HTM" -not -name "*.LP" -not -name "*.log" -not -name "failed.txt" -not -name "autobatch_done.txt" -print0 | xargs -I {} -0 rm "{}"'
useful_files_to_copy = ["CORRECT.LP", "aimless.log", "xscale_XSCALE.LP", "XDS.INP", "XDS_ASCII.HKL", "INTEGRATE.HKL", "remark200.pdb", "staraniso_remark200.pdb"]

# thread for autoproc function 
def autoproc_function(param, procpath):
    bash_process = subprocess.Popen(param, cwd=procpath, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
    processing = True
    while True:
        output = bash_process.stdout.readline()
        print((output.strip()) + '\r')
        # Do something else
        return_code = bash_process.poll()
        if return_code is not None:
            # print('RETURN CODE', return_code)
            # Process has finished, read rest of the output
            for output in bash_process.stdout.readlines():
                print(output.strip() + '\r')
            processing = False
            return processing
            break
    

# mini-cbf conversion function
def cbfconversion_function(cbffolder, infolder, masterfile, dumppath):
    h5 = os.path.join(infolder, masterfile)
    proc_console = os.path.join(dumppath, "HTML/proc_console.html")
    proc_log = os.path.join(dumppath, "HTML/proc_log.html")
    if os.path.exists(cbffolder) == False:
        os.makedirs(cbffolder)
    conversion_command = "hdf2mini-cbf -m " + h5
    conversionpattern = re.compile("output file will be image.*0\.cbf")
    print('')
    print("Running", conversion_command)
    print("Converting images. This may take a while...")
    print('')
    f1 = open(proc_console, "a")
    f2 = open(proc_log, "a")
    f1.write('')
    f1.write("Running "+ conversion_command)
    f1.write("Converting images. This may take a while...")
    f1.write('')
    f2.write('')
    f2.write("Running "+ conversion_command)
    f2.write("Converting images. This may take a while...")
    f2.write('')
    conversion_process = subprocess.Popen(conversion_command, cwd=cbffolder, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
    while True:
        output = conversion_process.stdout.readline()
        output = output.strip()
        if conversionpattern.search(output) != None:
            message = "Converted " + ((output.split('output file will be '))[-1])
            print(message + '\r')
            f1.write(message + '\r')
            f2.write(message + '\r')
        # Do something else
        return_code = conversion_process.poll()
        if return_code is not None:
            # print('RETURN CODE', return_code)
            # Process has finished, read rest of the output
            for output in conversion_process.stdout.readlines():
                output = conversion_process.stdout.readline()
                output = output.strip()
                if conversionpattern.search(output) != None:
                    message = "Converted " + ((output.split('output file will be '))[-1])
                    print(message + '\r')
                    f1.write(message + '\r')
                    f2.write(message + '\r')
            print('')
            print(separator)
            print("Conversion of EIGER HDF5 files to (temporary) mini-cbf files is done!")
            print(separator)
            print('')
            f1.write('')
            f1.write(separator)
            f1.write("Conversion of EIGER HDF5 files to (temporary) mini-cbf files is done!")
            f1.write(separator)
            f1.write('')
            f2.write('')
            f2.write(separator)
            f2.write("Conversion of EIGER HDF5 files to (temporary) mini-cbf files is done!")
            f2.write(separator)
            f2.write('')
            f1.close()
            f2.close()
            break  


# thread for generic long function to keep gui working
def utility_thread(utility_command, silent):
    if silent == False:
        utility_process = subprocess.Popen(utility_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
    else:
        utility_process = subprocess.Popen(utility_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, universal_newlines=True, shell=True)    
    while True:
        if silent == False:
            output = utility_process.stdout.readline()
            print(output.strip())
            # Do something else
        return_code = utility_process.poll()
        if return_code is not None:
            # print('RETURN CODE', return_code)
            # Process has finished, read rest of the output
            if silent == False:
                for output in utility_process.stdout.readlines():
                    print(output.strip())
            break

#helper function to start utility thread
def utility_function(utility_command, silent):
    threading.Thread(target=utility_thread, args=(utility_command, silent,), daemon=True).start()

# helper function to kill sub-processes
def killtree(killpid, including_parent):
    if psutil.pid_exists(killpid) == True:
        print('')
        print('Killing job with PID:', str(killpid))
        parent = psutil.Process(killpid)
        for child in parent.children(recursive=True):
            print("killed:", child)
            child.kill()
        if including_parent == True:
            print('')
            print('Job with PID '+ str(killpid) + ' and all its descendant processes terminated.')
            print('')
            parent.kill()
            print('')
    else:
        print('')
        print('There is no process with PID', str(killpid),'running.')
        print('')

# sweep-finding thread 
def find_sweep_thread(window):
    time.sleep(0.5)
    sweeppattern = re.compile(" List of identifiers = ")
    hits = []
    print('')
    print("Finding images ...")
    if EIGER == True:
        find_command = 'find_images -h5 -l -r -d ' + imgpath +' > ./findimages.tmp'
    else:    
        find_command = 'find_images -r -l -d ' + imgpath +' > ./findimages.tmp'
    find_process = subprocess.Popen(find_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
    while True:
        return_code = find_process.poll()
        if return_code is not None:
            with open ('./findimages.tmp', 'rt') as findimages:
                for line in findimages:
                    if sweeppattern.search(line) != None:  # If pattern search finds a match,
                        line = line.rstrip('\n')
                        line = ''.join(line.split(' List of identifiers = '))
                        hits = line.split(' ')
                        #print(hits)

            findimages.close
            os.remove("./findimages.tmp")
            window.write_event_value('-HITS-', hits) 
            break   

#helper function to run sweep-finding thread
def find_sweeps(imgpath, EIGER):
    threading.Thread(target=find_sweep_thread, args=(window,), daemon=True).start()

#helper function for nicer display of datasets
def make_data_display(datasets):
    data_display = []
    data_list = []
    data_stuff = copy.deepcopy(datasets)
    for dset in data_stuff:
        subset = (dset[8] + dset[1] + "/" + dset[2])
        #print(subset)
        data_display.append(subset)      
    return data_display

# helper function to create log.html
def HTML_log(j, procpath, refresh, theme_color, theme_color1, theme_color2):
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
    else:    
        alt_theme_color1 = 'black'
    if os.path.exists(procpath) == False:
        os.makedirs(procpath)
    log = os.path.join(procpath, "log.html")
    logsource_abs = os.path.join(procpath, "output-files/summary.html")
    logsource = os.path.relpath(logsource_abs, start = procpath)
    f = open(log, "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n') 
    if refresh == True:
        title = '    <title>AutoProc run ' + str(runnumber) + ': Self-refreshing processing log</title>\n'
        f.write(title)
        f.write('	<meta http-equiv="refresh" content="30" >\n')
    else:
        title = '    <title>AutoProc Run ' + str(runnumber) +': Processing finished</title>\n'
        f.write(title)
    f.write('    <style type="text/css">\n') 
    f.write('        html {\n') 
    f.write('            overflow: auto;\n') 
    f.write('        }\n') 
    f.write('\n')          
    f.write('        html,\n') 
    f.write('        body,\n') 
    f.write('        div,\n') 
    f.write('        iframe {\n') 
    f.write('            margin: 0px;\n') 
    f.write('            padding: 0px;\n') 
    f.write('            height: 100%;\n') 
    f.write('            border: none;\n') 
    f.write('        }\n') 
    f.write('\n')          
    f.write('        iframe {\n') 
    f.write('            display: block;\n') 
    f.write('            width: 100%;\n') 
    f.write('            border: none;\n') 
    f.write('            overflow-y: auto;\n') 
    f.write('            overflow-x: hidden;\n') 
    f.write('        }\n') 
    f.write('    </style>\n') 
    f.write('</head>\n') 
    #f.write('<body style="background-color:'+ theme_color1 +';">\n')
    f.write('<body>\n')
    f.write('	<iframe src="')
    f.write(logsource +'"\n')         
    f.write('	            frameborder="0"\n') 
    f.write('	            marginheight="0"\n') 
    f.write('	            marginwidth="0"\n') 
    f.write('	            width="100%"\n') 
    f.write('	            height="100%"\n') 
    f.write('	            scrolling="auto">\n') 
    f.write('	  </iframe>\n')
    f.write('</body>\n')
    f.write('</html>\n')
    time.sleep(0.5)
    f.close()


# helper function to create proc_log.html
def prepare_proc_console(dumppath, theme_color, theme_color1, theme_color2):
    proc_console = os.path.join(dumppath, "HTML/proc_console.html")
    f = open(proc_console, "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    f.write('	<meta http-equiv="refresh" content="2" >\n')
    f.write('<style>\n')
    f.write('	body {\n')
    f.write('	 font-family: courier;\n')
    f.write('	 font-size: 10px;\n')
    f.write('	 white-space: pre-wrap;\n')
    f.write('	 background-color: ' + theme_color +';\n')
    f.write('	 color: white;\n')
    f.write('	 }\n')
    f.write('</style>\n')
    f.write('<script>\n')
    f.write("	if ('scrollRestoration' in history) {\n")
    f.write("	  history.scrollRestoration = 'manual';\n")
    f.write('	}\n')
    f.write('</script>\n')
    f.write('<script> window.onload=()=>{scrollTo(0,999999999);}</script>\n')
    f.write('</head>\n')	
    f.write('<body style="background-color:'+ theme_color +';">\n')
    f.close()
    time.sleep(0.5)
    proc_log = os.path.join(dumppath, "HTML/proc_log.html")
    f = open(proc_log, "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    f.write('<style>\n')
    f.write('	body {\n')
    f.write('	 font-family: courier;\n')
    f.write('	 font-size: 10px;\n')
    f.write('	 white-space: pre-wrap;\n')
    f.write('	 background-color: ' + theme_color +';\n')
    f.write('	 color: '+ theme_color1 +';\n')
    f.write('	 }\n')
    f.write('</style>\n')
    f.write('<script>\n')
    f.write("	if ('scrollRestoration' in history) {\n")
    f.write("	  history.scrollRestoration = 'manual';\n")
    f.write('	}\n')
    f.write('</script>\n')
    f.write('<script> window.onload=()=>{scrollTo(0,999999999);}</script>\n')
    f.write('</head>\n')	
    f.write('<body style="background-color:'+ theme_color +';">\n')
    f.close()
    time.sleep(0.5)

# helper function to create batchproc.html
def HTML_outer(num_sets, oldcutoffmode, theme_color, theme_color1, theme_color2):
    # write "outer" page
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
    else:    
        alt_theme_color1 = 'black'
    f = open("./batchproc.html", "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    title = '    <title>AutoProc batch processing of ' + str(num_sets) + ' datasets</title>\n'
    f.write(title)
    f.write('<style>\n')
    f.write('table {\n')
    f.write(' font-family: arial, sans-serif;\n')
    f.write(' color:'+ theme_color2 +'; \n')
    f.write(' border-collapse: collapse;\n')
    f.write(' width: 90%;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td, th {\n')
    f.write(' border: 0px solid '+ theme_color1 +';\n')
    f.write(' text-align: left;\n')
    f.write(' padding: 8px;\n')
    f.write(' font-size:13px;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td {\n')
    f.write(' background-color: ' + theme_color1 +';\n')
    f.write('}\n')
    f.write('\n')
    f.write('th {\n')
    f.write('background-color: ' + theme_color +';\n')
    f.write('   color:'+ theme_color1+'; \n')
    f.write('}\n')
    f.write('#footer {\n')
    f.write('        position: fixed;\n')
    f.write('        padding: 10px 10px 10px 10px;\n')
    f.write('        bottom: 0;\n')
    f.write('        width: 100%;\n')
    f.write('        height: auto;\n')
    f.write('        background: '+ alt_theme_color1 +';\n')
    f.write('        color:'+ theme_color2+'; \n')
    f.write('    }\n')
    f.write('iframe {\n')
    f.write('   margin: 0px;\n')
    f.write('   padding: 0px;\n')
    f.write('   border: none;\n')
    f.write('   display: block;\n')
    f.write('   overflow-y: auto;\n')
    f.write('   overflow-x: hidden;\n')
    f.write('   white-space: pre-line;\n')
    f.write('   text-align: center;\n')
    f.write('}\n')
    f.write('.main {\n')
    f.write('  margin-left: 5%;\n')
    f.write('}\n')
    f.write('button {\n')
    f.write('	font-size:13px;\n') 
    f.write('	color: '+ theme_color1 +';\n') 
    f.write('	background-color: '+ theme_color +';\n') 
    f.write('	border: none;\n')
    f.write('	outline: none;\n')     
    f.write('	padding: 2px 2px;\n') 
    f.write('	cursor: pointer;\n') 
    f.write('	border-color: '+ theme_color +';\n')
    f.write('	text-align: center;\n')
    f.write('	position: relative;\n')
    f.write('}\n')
    f.write('button:hover {\n')
    f.write('	color: '+ theme_color +';\n') 
    f.write('	background-color: '+ theme_color1 +';\n')
    f.write('	border: 1px solid '+ theme_color +';\n')
    f.write('	padding: 1px 1px;\n')
    f.write('}\n')
    f.write('</style>\n')
    f.write('</head>\n')
    f.write("<body style='background-color:"+ alt_theme_color1 +";'>\n")
    f.write('\n')
    f.write('<center>\n')
    f.write('<div class="main">\n')
    f.write('<center>\n')
    f.write('<iframe id = \"table\" src=\"./HTML/results_table.html\"\n')
    f.write('   style=\"position: absolute; height: 86%; width: 90%; border: none; overflow-x: hidden;\"\n')
    f.write('   marginheight=\"0\"\n')
    f.write('   marginwidth=\"0\"\n')
    f.write('   scrolling=\"auto\">\n')
    f.write('</iframe>\n')
    f.write('</div>\n')
    f.write('<div id=\"footer\">\n')
    f.write('<table>\n')
    f.write('<tr>\n')
    if oldcutoffmode == True:
        f.write('<td style=\'text-align: left; font-size:10px; color: '+ theme_color2 +'; background-color: '+ alt_theme_color1 +'\'><sup>1 </sup>I/(sig(I) >= 2.0 &nbsp;&nbsp;&nbsp;&nbsp;<sup>2 </sup>local I/sig(I) >= 1.2</td>\n')
    else:    
        f.write('<td style=\'text-align: left; font-size:10px; color: '+ theme_color2 +'; background-color: '+ alt_theme_color1 +'\'><sup>1 </sup>CC(1/2) >= 0.3 &nbsp;&nbsp;&nbsp;&nbsp;<sup>2 </sup>local I/sig(I) >= 1.2</td>\n')
    f.write('</tr>\n')
    f.write('</table>\n')
    f.write('<table>\n')
    f.write('<tr>\n')
    f.write('<td style=\'text-align: left; font-size:13px; background-color: '+ alt_theme_color1 +'; color: '+ theme_color +';\'onclick=\"ToggleConsole()\"><button><b>Console</b> (show/hide)</button></td>\n')
    f.write('</tr>\n')
    f.write('</table>\n')
    f.write('\n')
    f.write('<div id=\"Console\" style=\'display: none\'>\n')
    f.write('<iframe id = \"log\" src=\"./HTML/proc_console.html\"\n')
    f.write('   frameborder=\"2\"\n')
    f.write('   marginheight=\"0\"\n')
    f.write('   marginwidth=\"0\"\n')
    f.write('   width=\"90%\"\n')
    f.write('   height=\"50%\"\n')
    f.write('   scrolling=\"auto\">\n')
    f.write('</iframe>\n')
    f.write('</div>\n')
    f.write('<div>\n')
    f.write('<iframe id = \"status\" src=\"./HTML/status.html\"\n')
    f.write('   style=\"height: 30 px; width: 90%; border: none; overflow-x: hidden; overflow-y: hidden;\"\n')
    f.write('   marginheight=\"0\"\n')
    f.write('   marginwidth=\"0\"\n')
    f.write('   height = \"30\"\n')
    f.write('   scrolling=\"no\">\n')
    f.write('</iframe>\n')
    f.write('</div>\n')
    f.write('\n')
    f.write('\n')
    f.write('<script>\n')
    f.write('function ToggleConsole() {\n')
    f.write('   var x = document.getElementById(\"Console\");\n')
    f.write('   if (x.style.display === \"none\") {\n')
    f.write('      x.style.display = \"block\";\n')
    f.write('   } else {\n')
    f.write('      x.style.display = \"none\";\n')
    f.write('   }\n')
    f.write('}\n')
    f.write('</script>\n')
    f.write('</div>\n')
    f.write('</center>\n')
    f.write('</body>\n')
    f.write('</html>\n')
    f.close()
    time.sleep(0.5)
    
# helper function to fill page with results
def HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2):    
    # write results_table
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
        alt_theme_color2 = '#f1f1f1'
    else:    
        alt_theme_color1 = 'black'
        alt_theme_color2 = '#2d2d2d'
    f = open("./HTML/results_table.html", "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    if refresh_main == True:
        f.write('	<meta http-equiv="refresh" content="30" >\n')
    f.write('<style>\n')
    f.write('    a:link {\n')
    f.write(' font-family: arial, sans-serif;\n')
    f.write(' border-collapse: collapse;\n')
    f.write(' font-size:13px;\n')
    f.write(' color: '+ theme_color2 +';\n')
    f.write(' text-decoration: none;\n')
    f.write('}\n')
    f.write('    a:visited {\n')
    f.write(' font-family: arial, sans-serif;\n')
    f.write(' border-collapse: collapse;\n')
    f.write(' font-size:13px;\n')
    f.write(' color: '+ theme_color2 +';\n')
    f.write(' text-decoration: none;\n')
    f.write('}\n')    
    f.write('a:hover {\n')
    f.write(' color: '+ theme_color +';\n')
    f.write(' text-decoration: underline;\n')
    f.write('}\n')
    f.write('a:active {\n')
    f.write(' color: '+ alt_theme_color1 +';\n')
    f.write(' text-decoration: underline;\n')
    f.write('}\n')			
    f.write('table {\n')
    f.write(' font-family: arial, sans-serif;\n')
    f.write(' border-collapse: collapse;\n')
    f.write(' width: 100%;\n')
    f.write('}\n')
    f.write('button {\n')
    f.write('	font-size:13px;\n') 
    f.write('	color: '+ theme_color1 +';\n') 
    f.write('	background-color: '+ theme_color +';\n') 
    f.write('	border: none;\n')
    f.write('	outline: none;\n')     
    f.write('	padding: 4px 4px;\n') 
    f.write('	cursor: pointer;\n') 
    f.write('	border-color: '+ theme_color +';\n')
    f.write('	display: block;\n')
    f.write('	width: 100%;\n')
    f.write('	text-align: center;\n')
    f.write('	position: relative;\n')
    f.write('}\n')
    f.write('button:hover {\n')
    f.write('	color: '+ theme_color +';\n') 
    f.write('	background-color: '+ theme_color1 +';\n')
    f.write('	border: 1px solid '+ theme_color +';\n')
    f.write('	padding: 3px 3px;\n')
    f.write('}\n')
    f.write('table {\n')
    f.write(' font-family: arial, sans-serif;\n')
    f.write(' border-collapse: collapse;\n')
    f.write(' width: 100%;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td, th {\n')
    f.write(' border: 0px solid '+ theme_color1 +';\n')
    f.write(' text-align: left;\n')
    f.write(' padding: 8px;\n')
    f.write(' font-size:13px;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td {\n')
    f.write(' background-color: '+ theme_color1 +';\n')
    f.write('}\n')
    f.write('\n')
    f.write('th {\n')
    f.write('background-color: '+ theme_color +';\n')
    f.write('   color: '+ theme_color1 +'; \n')
    f.write('}\n')
    f.write('.loader {\n')
    f.write(  'border: 10px solid '+ alt_theme_color1 +';\n')
    f.write('  border-radius: 50%;\n')
    f.write('  border-top: 10px solid '+ theme_color +';\n')
    f.write('  border-bottom: 10px solid '+ theme_color +';\n')
    f.write('  width: 20px;\n')
    f.write('  height: 20px;\n')
    f.write('  -webkit-animation: spin 3s linear infinite;\n')
    f.write('  animation: spin 3s linear infinite;\n')
    f.write('}\n')
    f.write('\n')
    f.write('\n')
    f.write('@-webkit-keyframes spin {\n')
    f.write('  0% { -webkit-transform: rotate(0deg); }\n')
    f.write('  100% { -webkit-transform: rotate(360deg); }\n')
    f.write('}\n')
    f.write('\n')
    f.write('@keyframes spin {\n')
    f.write('  0% { transform: rotate(0deg); }\n')
    f.write('  100% { transform: rotate(360deg); }\n')
    f.write('}\n')
    f.write('\n')
    f.write('.navbar {\n')
    f.write('  overflow: hidden;\n')
    f.write('  background-color: '+ alt_theme_color1 +';\n')
    f.write('  position: fixed;\n')
    f.write('  top: 0;\n')
    f.write('  width: 100%;\n')
    f.write('  z-index: 9999;\n')
    f.write('\n')
    f.write('}\n')
    f.write('\n')
    f.write('.navbar a {\n')
    f.write('  float: left;\n')
    f.write('  display: block;\n')
    f.write('  color: '+ theme_color +';\n')
    f.write('  text-align: center;\n')
    f.write('  padding: 14px 16px;\n')
    f.write('  text-decoration: none;\n')
    f.write('  font-size: 18px;\n')
    f.write('  z-index: 9999;\n')
    f.write('}\n')
    f.write('\n')
    f.write('.main {\n')
    f.write('  padding: 16px;\n')
    f.write('  margin-top: 60px;\n')
    f.write('  height: auto;\n')
    f.write('}\n')
    f.write('.btn {\n')
    f.write('	font-size:13px;\n')
    f.write('	color: '+ theme_color1 +';\n')
    f.write('	background-color: '+ theme_color +';\n')
    f.write('	padding: 4px 4px;\n')
    f.write('	cursor: pointer;\n')
    f.write('	border-color: '+ theme_color +';\n')
    f.write('	outline: none;\n')
    f.write('	border: none;\n')
    f.write('	text-align: center;\n')
    f.write('	position: relative;\n')
    f.write('	display: inline-block;\n')	
    f.write('}\n')
    f.write('.dropdown {\n')
    f.write('  display: inline-block;\n')
    f.write('  position: absolute;\n')
    f.write('}\n')
    f.write('.dropdown-content {\n')
    f.write('  display: none;\n')
    f.write('  position: absolute;\n')
    f.write('  right: 0;\n')
    f.write('  background-color: '+ alt_theme_color2 +';\n')
    f.write('  min-width: 220px;\n')
    f.write('  z-index: 1;\n')
    f.write(' font-size:10px;\n')
    f.write('}\n')
    f.write('.dropdown-content a {\n')
    f.write('  color: '+ theme_color2 +';\n')
    f.write('  padding: 4px 16px;\n')
    f.write('  text-decoration: none;\n')
    f.write('  display: block;\n')
    f.write(' font-size:10px;\n')
    f.write('}\n')
    f.write('.dropdown-content a:hover {background-color: '+ theme_color1 +'}\n')
    f.write('.dropdown:hover .dropdown-content {\n')
    f.write('  display: block;\n')
    f.write('}\n') 
    f.write('</style>\n')
    f.write('</head>\n')
    if refresh_main == True:
        start_secs = int(start_t) * 1000
        job_secs = int(job_t) * 1000
        f.write('<body onload=\"startJobTimer(); startBatchTimer();\" style=\'background-color: '+ alt_theme_color1 +';\'>\n')
        f.write('<script>\n')
        f.write('function startBatchTimer() {\n')
        f.write('const start = '+ str(start_secs) +';\n')
        f.write('const starttime = new Date();\n')
        f.write('const currtime = new Date();\n')
        f.write('const timediff = Math.abs(currtime.getTime() - starttime.setTime(start));\n')
        f.write('let d = Math.floor((timediff / (1000 * 60 * 60)) / 24);\n')
        f.write('let h = Math.floor((timediff / (1000 * 60 * 60)) - (d * 24));\n')
        f.write('let m = Math.floor(timediff / (1000 * 60)) % 60;\n')
        f.write('let s = Math.floor(timediff / 1000) % 60;\n')
        f.write('h = checkTime(h);\n')
        f.write('m = checkTime(m);\n')
        f.write('s = checkTime(s);\n')
        f.write('\n')
        f.write('document.getElementById(\'batchtimer\').innerHTML = innerHTML =  d + \"d \" + h + \":\" + m + \":\" + s;\n')
        f.write('setTimeout(startBatchTimer, 1000);\n')
        f.write('}\n')
        f.write('function startJobTimer() {\n')
        f.write('const jobstart = '+ str(job_secs) +';\n')
        f.write('const jobstarttime = new Date();\n')
        f.write('const currtime = new Date();\n')
        f.write('const jobtimediff = Math.abs(currtime.getTime() - jobstarttime.setTime(jobstart));\n')
        f.write('let jh = Math.floor(jobtimediff / (1000 * 60 * 60));\n')
        f.write('let jm = Math.floor(jobtimediff / (1000 * 60)) % 60;\n')
        f.write('let js = Math.floor(jobtimediff / 1000) % 60;\n')
        f.write('jh = checkTime(jh);\n')
        f.write('jm = checkTime(jm);\n')
        f.write('js = checkTime(js);\n')
        f.write('\n')
        f.write('document.getElementById(\'jobtimer\').innerHTML = innerHTML =  jh + \":\" + jm + \":\" + js;\n')
        f.write('setTimeout(startJobTimer, 1000);\n')
        f.write('}\n')
        f.write('function checkTime(i) {\n')
        f.write('if (i < 10) {i = \"0\" + i};  // add zero in front of numbers < 10\n')
        f.write('return i;\n')
        f.write('}\n')
        f.write('</script>\n')
    else:
        f.write("<body style='background-color: "+ alt_theme_color1 +";'>\n")
    f.write('\n')
    f.write('<center>\n')
    f.write('<div class="navbar">\n')
    f.write('	<table>\n')
    f.write('		<tr>\n')
    f.write("			<td style='background-color: "+ alt_theme_color1 +"; width: 5px'></td>\n")
    if refresh_main == True:
        f.write("			<td style='background-color: "+ alt_theme_color1 +"; width: 40px'><div class=\"loader\"></div></td>\n")
    else:
        f.write("			<td style='font-size:40px; color:"+ theme_color +"; background-color: "+ alt_theme_color1 +"; width: 40px'>&#10003;</td>\n")
    if num_sets == 1:
        f.write("			<td style='background-color: "+ alt_theme_color1 +"; font-family: arial; font-size: 13px; text-align: left'><b style ='color: "+ theme_color +"; font-size: 18px;'>autoPROC batch processing of " + str(num_sets) + " dataset to:</b><br><b style ='color:"+ theme_color2 +"'>" + dumppath + "</b></td>\n")
    else:    
        f.write("			<td style='background-color: "+ alt_theme_color1 +"; font-family: arial; font-size: 13px; text-align: left'><b style ='color: "+ theme_color +"; font-size: 18px;'>autoPROC batch processing of " + str(num_sets) + " datasets to:</b><br><b style ='color:"+ theme_color2 +"'>" + dumppath + "</b></td>\n")
    f.write("                   <td style=\'background-color: "+ alt_theme_color1 +"; left: 10px; width: 120px; position: relative; text-align: right; align-items: right; align-content: right; align-self: right\' >\n")
    f.write("                          <div>\n")
    if refresh_main == True:
        f.write("				 <a style = \'color: "+ theme_color +"; font-size: 18px; padding: 16px 0px; text-align: right; position: absolute\'> <b id=\"batchtimer\">00:00:00</b></a>\n")
        f.write("                                <br>\n")
        f.write("                                <a style = \'color: "+ theme_color2 +"; font-size: 13px; padding: 22px 0px; text-align: right; position: relative\'><b>elapsed time</b></a>\n")
    else:
        now_t = time.time() - start_t
        currtime = time.gmtime(now_t)
        batchtimetext = str(int(time.strftime("%d",currtime)) - 1) + "d " + time.strftime("%H:%M:%S",currtime)
        f.write("				 <a style = \'color: "+ theme_color +"; font-size: 18px; padding: 16px 0px; text-align: right; position: absolute\'> <b>"+ batchtimetext + "</b></a>\n")
        f.write("                                <br>\n")
        f.write("                                <a style = \'color: "+ theme_color2 +"; font-size: 13px; padding: 22px 0px; text-align: right; position: relative\'><b>total duration</b></a>\n")
    f.write("			      </div>\n")
    f.write("			<td style='font-size:40px; color:"+ theme_color +"; background-color: "+ alt_theme_color1 +"; width: 80px'><img src=\"data:image/png;base64,"+ ag_64 +" alt=\"AutoGUI Logo\" /></td>\n")
    f.write("		       </td>\n")
    f.write('		</tr>\n')
    f.write('	</table>\n')
    f.write('</div>\n')
    f.write('<div class="main">\n')
    f.write('	<table>\n')
    for item in item_list:
        f.write(item)
    f.write('	</table>\n')
    f.write('\n')
    f.write('</div>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')
    f.write('<br>\n')    
    f.write('</center>\n')
    f.write('</body>\n')
    f.write('</html>\n')
    f.close()
    #write status line
    f = open("./HTML/status.html", "w")
    f.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n')
    f.write('"http://www.w3.org/TR/html4/loose.dtd">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    if refresh_main == True:
        f.write('	<meta http-equiv="refresh" content="30" >\n')
    f.write('<style>\n')
    f.write('table {\n')
    f.write('   font-family: arial, sans-serif;\n')
    f.write('   border-collapse: collapse;\n')
    f.write('   width: 100%;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td, th {\n')
    f.write('   border: 0px solid '+ theme_color1 +';\n')
    f.write('   text-align: left;\n')
    f.write('   padding: 8px;\n')
    f.write('   font-size:13px;\n')
    f.write('}\n')
    f.write('\n')
    f.write('td {\n')
    f.write('   background-color: '+ theme_color1 +';\n')
    f.write('}\n')
    f.write('\n')
    f.write('th {\n')
    f.write('   background-color: '+ theme_color +';\n')
    f.write('   color: '+ theme_color1 +';\n')
    f.write('}\n')
    f.write('    #Progress {')
    f.write('  width: 100%;')
    f.write('  background-color: lightgrey;')
    f.write('  padding: 0px;')
    f.write('  margin-top: 2px;')
    f.write('}')
    f.write('#Bar {')
    if refresh_main == True:
        if len(item_list) <= 1 or len(item_list) == 1:
            progress_made = 1
        else:    
            progress_made = (100 / (num_sets)) * (len(item_list)-1)
        f.write('  width: ' + str(progress_made) +'%;')            
    if refresh_main == False:
        f.write('  width: 100%;')
    f.write('  height: 5px;')
    f.write('  background-color: '+ theme_color +';')
    f.write('  font-family: arial, sans-serif;')
    f.write('  text-align: left;') 
    f.write('  padding: 0px;')
    f.write('  margin: 0px;')
    f.write('  font-size:13px;')
    f.write('}')
    f.write('</style>\n')
    f.write('</head>\n')
    f.write('<body style=\'background-color: '+ alt_theme_color1 +';\'>\n')
    f.write('    <div id="Progress">\n')
    f.write('  <div id="Bar"></div>\n')
    f.write('</div>\n')
    f.write('<center>\n')
    start_time = time.localtime(start_t)
    start_timetext = time.strftime("%b %d %Y %H:%M:%S",start_time)
    current_t = time.time()
    current_time = time.localtime(current_t)
    current_timetext = time.strftime("%b %d %Y %H:%M:%S",current_time)
    f.write('	<table>\n')
    f.write('		<tr>\n')
    f.write("			<td style='text-align: left; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Started: " + start_timetext + "</td>\n")
    if refresh_main == True:
        f.write("			<td style='text-align: left; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Updated: " + current_timetext + "</td>\n")
    else:        
        f.write("			<td style='text-align: left; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Finished: " + current_timetext + "</td>\n")        
    if screenid != '' and refresh_main == True:
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Screen ID: " + screenid + "</td>\n")
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Screen status: " + screenstatus + "</td>\n")
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>PID: " + str(PID) + "</td>\n")
    elif screenid != '' and refresh_main == False:
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Screen ID: " + screenid + "</td>\n")
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>Screen status: Screen closed</td>\n")
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>PID: " + str(PID) + "</td>\n")    
    else:    
        f.write("			<td style='text-align: right; color: "+ theme_color2 +"; background-color: "+ theme_color1 +"'>PID: " + str(PID) + "</td>\n")
    f.write('		</tr>\n')
    f.write('	</table>\n')
    f.write('</center>\n')
    f.write('</body>\n')
    f.write('</html>\n')
    f.close()

# function to prepare html table item
def prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2):
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
    else:    
        alt_theme_color1 = 'black'
    stuffpath = dumppath + "/HTML"
    outpath = os.path.relpath(ds_output, stuffpath)
    logpath_abs = os.path.join(ds_output, "log.html")  
    logpath = os.path.relpath(logpath_abs, stuffpath)
    line_a = []
    failed_processing = ['']
    line_a.append("	    <tr>")
    line_a.append("                 <th style='background-color: "+ alt_theme_color1 +"; color: "+ theme_color +"' colspan=\"7\"></th>")
    line_a.append("         </tr>")
    line_a.append("         <tr>")	  
    line_a.append("                 <th style='background-color: "+ theme_color1 +"; color: "+ theme_color2 +"'>#" + str(ds_number) + "</th>")
    line_a.append("                 <th style='background-color: "+ theme_color1 +"; color: "+ theme_color2 +"' colspan=\"2\">" + ds_id + "</th>")
    line_a.append("                 <th style='background-color: "+ theme_color1 +"; color: "+ theme_color2 +"' colspan=\"5\"><a href = " + outpath + " target =\"_blank\">" + ds_output + "</a></th>")
    line_a.append("        </tr>")
    if ds_status != "done":
        line_a.append("            <tr>")
        line_a.append("		        <th></th>")
        line_a.append("		        <th>Mode</th>")
        line_a.append("		        <th>Status</th>")
        line_a.append("		        <th colspan=\"4\"></th>")
        line_a.append("		        <th>Processing log</th>")
        line_a.append("	       </tr>")
        for line in previous_failed:
            line_a.append(line)
    if ds_status == "converting":
        line_a.append("         <tr>")
        line_a.append("		        <td style='font-size:25px; color:blue'>&#x25CF;</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"3\">Converting HDF5 to mini-cbf</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"5\">This will take a while. (<b id=\"jobtimer\">00:00:00</b>)</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>No log yet</td>")
        line_a.append("	        </tr>")
        line_a.append("                 <tr style='font-size:13px; color: "+ theme_color2 +"; background-color: "+ alt_theme_color1 +"'></tr>")
    if ds_status == "running":
        line_a.append("         <tr>")
        line_a.append("		        <td style='font-size:25px; color:#FFCB34'>&#x25CF;</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>"+current_mode+"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"2\">Running:</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"; padding: 0px' colspan=\"2\">")
        line_a.append("		          <div>")
        line_a.append("		             <iframe id = \"set_progress\" src=\"./set_progress.html\"")
        line_a.append("		               style=\"height: 30; width: 250; border: none; overflow-x: hidden; overflow-y: hidden; background-color: "+ theme_color1 +"\"")
        line_a.append("		               height='30'")
        line_a.append("		               width='250'")        
        line_a.append("		               scrolling=\"no\">")
        line_a.append("		             </iframe>")
        line_a.append("		          </div>")
        line_a.append("		        </td>")
        line_a.append("                 <td style='font-size : 13px text-align : left' colspan=\"1\">")
        line_a.append('                   <div style=\"height: 30; width: 250; border: none; background-color: '+ theme_color1 +'\"height=\'30\'>\n')
        line_a.append('                     <a style = \'font-size : 13px; text-decoration: none; color: '+ theme_color2 +'\'>Job time elapsed:\n')
        line_a.append('                     <b id=\"jobtimer\">00:00:00</b></a>\n')
        line_a.append("			  </div>")
        line_a.append("			</td>")
        line_a.append("		        <td style='font-size:13px'> <a href=\"" + logpath + "\" target=\"_blank\"><button>Live processing</button></a> </td>")
        line_a.append("	        </tr>")
        line_a.append("                <tr style='font-size:13px; color: "+ theme_color2 +"; background-color: "+ alt_theme_color1 +"'></tr>" )
    if ds_status == "fail":
        line_a.append("         <tr>")
        line_a.append("		        <td style='font-size:25px; color:red'>&#x25CF;</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>"+current_mode+"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"2\">Failed</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"3\">Please check log file for details.</td>")          
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'> <a href=\"" + logpath + "\" target=\"_blank\"><button>Open log</button></a> </td>")
        line_a.append("	        </tr>")
        line_a.append("                 <tr style='font-size:13px; color: "+ theme_color2 +"; background-color: "+ alt_theme_color1 +"'></tr>")  
        # also return this to add failed run if others of this ds to follow
        failed_processing.append("         <tr>")
        failed_processing.append("		        <td style='font-size:25px; color:red'>&#x25CF;</td>")
        failed_processing.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>"+current_mode+"</td>")
        failed_processing.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"2\">Failed</td>")
        failed_processing.append("		        <td style='font-size:13px; color: "+ theme_color2 +"' colspan=\"3\">Please check log file for details.</td>")          
        failed_processing.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'> <a href=\"" + logpath + "\" target=\"_blank\"><button>Open log</button></a> </td>")
        failed_processing.append("	        </tr>")
        failed_processing.append("                 <tr style='font-size:13px; color: "+ theme_color2 +"; background-color: "+ alt_theme_color1 +"'></tr>")  
    if ds_status == "done":
        line_a.append("            <tr>")
        line_a.append("		        <th></th>")
        line_a.append("		        <th>Mode</th>")
        line_a.append("		        <th>Status</th>")
        line_a.append("		        <th>Space group</th>")
        line_a.append("		        <th>Cell</th>")
        line_a.append("		        <th>Resolution (isotropic)<sup>1</sup></th>")
        line_a.append("		        <th>Anisotropic diffraction limits<sup>2</sup></th>")
        line_a.append("		        <th>Log</th>")
        line_a.append("	       </tr>")
        for line in previous_failed:
            line_a.append(line)
        failed_processing = ['']   
        line_a.append("         <tr>")
        line_a.append("		        <td style='font-size:25px; color:green'>&#x25CF;</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>"+current_mode+"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>Finished</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>" + ds_infos[0] +"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>" + ds_infos[1] +"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>" + ds_infos[2] +"</td>")
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"'>" + ds_infos[3] +"</td>")   
        #logpath = os.path.join(ds_output, "log.html")          
        line_a.append("		        <td style='font-size:13px; color: "+ theme_color2 +"; position: relative'> <a href=\"" + logpath + "\" target=\"_blank\"><button class=\"btn\" style='width: 79%'>Open log</button></a>")
        line_a.append("                        <div class=\"dropdown\" style='width:19%'>")
        line_a.append("			  <button class=\"btn\" style='width:100%'>")
        line_a.append("			    <a>...</a>")
        line_a.append("			  </button>")
        line_a.append("			  <div class=\"dropdown-content\">")
        line_a.append("				<a style='color: "+ theme_color +"'><b>Logfiles:</b></a>")  
        line_a.append("			    <a href=\""+ outpath + "/isotropic_report.pdf\" target =\"_blank\">PDF-report (isotropic)</a>")
        line_a.append("			    <a href=\""+ outpath + "/anisotropic_report.pdf\" target =\"_blank\">PDF-report (anisotropic)</a>")
        line_a.append("			    <a href=\""+ outpath + "/log.txt\" target =\"_blank\">Log as plain text</a>")
        line_a.append("				<a style='color: "+ theme_color +"'><b>Data:</b></a>") 
        line_a.append("				<a href=\""+ outpath + "/isotropic.mtz\" target =\"_blank\">MTZ (isotropic)</a>")
        line_a.append("				<a href=\""+ outpath + "/anisotropic.mtz\" target =\"_blank\">MTZ (anisotropic)</a>")
        line_a.append("				<a style='color: "+ theme_color +"'><b>Other:</b></a>") 
        line_a.append("				<a href=\""+ outpath + "/useful_files/isotropic_mmCIF_for_PDB.cif\" target =\"_blank\">mmCIF for PDB-deposition (isotropic)</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/anisotropic_mmCIF_for_PDB.cif\" target =\"_blank\">mmCIF for PDB-deposition (anisotropic)</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/remark200.pdb\" target =\"_blank\">remark200 section for PDB-deposition (isotropic)</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/staraniso_remark200.pdb\" target =\"_blank\">remark200 section for PDB-deposition (anisotropic)</a>")
        aimlesslogpath = outpath + "/useful_files/aimless.log"
        if os.path.exists(aimlesslogpath) == True:
            line_a.append("				<a href=\""+ outpath + "/useful_files/aimless.log\" target =\"_blank\">aimless.log (scaling)</a>")
        xscalelogpath = outpath + "/useful_files/xscale_XSCALE.LP"
        if os.path.exists(xscalelogpath) == True:    
            line_a.append("				<a href=\""+ outpath + "/useful_files/xscale_XSCALE.LP\" target =\"_blank\">XSCALE.LP (scaling)</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/XDS.INP\" target =\"_blank\">final XDS input file</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/CORRECT.LP\" target =\"_blank\">CORRECT.LP (from XDS)</a>") 
        line_a.append("				<a href=\""+ outpath + "/useful_files/INTEGRATE.HKL\" target =\"_blank\">INTEGRATE.HKL (from XDS)</a>")
        line_a.append("				<a href=\""+ outpath + "/useful_files/XDS_ASCII.HKL\" target =\"_blank\">XDS_ASCII.HKL (from XDS)</a>")
        line_a.append("			  </div>")
        line_a.append("			</div>")
        line_a.append("			</a> </td>")
        line_a.append("	        </tr>")
        line_a.append("                <tr style='font-size:13px; background-color: "+ alt_theme_color1 +"'></tr>" )                  
    item = "\n".join(line_a)
    return [item, failed_processing]

# thread for writing progress for current dataset as HTML      
def progress_thread(window):
    if theme_color1 == 'white':
        alt_theme_color1 = '#fafafa'
    else:    
        alt_theme_color1 = 'black'
    progstats = [re.compile(" href=.*\.setup\">"), re.compile(" href=.*\.index\">"), re.compile(" href=.*\.integ\">"), re.compile(" href=.*\.postref\">"), re.compile(" href=.*\.process\">"), re.compile(" href=.*\.scale\">"), re.compile(" href=.*\.analyse\">"), re.compile(" href=.*\.finish\">")]  # determine states from entry in html sidebar menu
    pw =['PROCESSING STARTED...','SPOT SEARCH & INDEXING...','INTEGRATION (INITIAL)...','POST-REFINEMENT...','INTEGRATION (FURTHER)...','SCALING...','ANISOTROPY ANALYSIS...','FINALIZING...'] # progress states
    status = 0
    fail_timeout = 300
    progword = pw[status]
    set_progress = os.path.join(dumppath, "HTML/set_progress.html")
    f = open(set_progress, "w")
    f.write('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n')
    f.write('\"http://www.w3.org/TR/html4/loose.dtd\">\n')
    f.write('<html>\n')
    f.write('<head>\n')
    f.write('<meta http-equiv=\"refresh\" content=\"10\" >\n')
    f.write('<style>\n')
    f.write('a {\n')
    f.write('   font-family: arial, sans-serif;\n')
    f.write('   text-align: right;\n')
    f.write('   padding: 0px;\n')
    f.write('   margin: 0px;\n')
    f.write('   color: '+ theme_color2 +';\n')
    f.write('   background-color: '+ theme_color1 +';\n')
    f.write('   font-size:13px;\n')
    f.write('}\n')
    f.write('    #Progress {\n')
    f.write('  width: 100%;\n')
    f.write('  background-color: '+ alt_theme_color1 +';\n')
    f.write('}\n')
    f.write('#Bar {\n')
    f.write('  width: 1%;\n')
    f.write('  height: 5px;\n')
    f.write('  background-color: '+ theme_color +';\n')
    f.write('  font-family: arial, sans-serif;\n')
    f.write('  text-align: left;\n') 
    f.write(' padding: 0px;\n')
    f.write(' margin: 0px;\n')
    f.write(' font-size:13px;\n')
    f.write('}\n')
    f.write('</style>\n')
    f.write('</head>\n')
    f.write('<body style=\'background-color: '+ theme_color1 +';\'>\n')
    progress_marker = '<a>' + progword + '</a>\n'
    f.write(progress_marker)
    f.write('    <div id="Progress">\n')
    f.write('  <div id="Bar"></div>\n')
    f.write('</div>\n')  
    f.write('</body>\n')
    f.write('</html>\n')
    time.sleep(0.5)
    f.close()
    progfilepath = os.path.join(ds_output, "output-files/")
    failedmarker = os.path.join(progfilepath, "failed.txt")
    side_html_menu = os.path.join(progfilepath, "summary.html.menu")
    while True:
        time.sleep(2)
        if os.path.exists(failedmarker) == True:
            break
        if os.path.exists(side_html_menu) == True:
            with open (side_html_menu, 'rt') as side_menu_items:
                for line in side_menu_items:
                    line = line.strip() 
                    for progstat in progstats:
                        if progstat.search(line) != None:
                            status = progstats.index(progstat)
                    progword = pw[status]
            side_menu_items.close()

        elif os.path.exists("./summary.tar.gz") == True:   
            status = 7
            progword = pw[status]
            break
        else:  
            progword = pw[status]
            fail_timeout = fail_timeout - 1
            if fail_timeout == 0:
                break 

        f = open(set_progress, "w")
        f.write('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n')
        f.write('\"http://www.w3.org/TR/html4/loose.dtd\">\n')
        f.write('<html>\n')
        f.write('<head>\n')
        f.write('<meta http-equiv=\"refresh\" content=\"5\" >\n')
        f.write('<style>\n')
        f.write('a {\n')
        f.write('   font-family: arial, sans-serif;\n')
        f.write('   text-align: right;\n')
        f.write('   padding: 0px;\n')
        f.write('   margin: 0px;\n')
        f.write('   color: '+ theme_color2 +';\n')
        f.write('   background-color: '+ theme_color1 +';\n')
        f.write('   font-size:13px;\n')
        f.write('}\n')
        f.write('    #Progress {\n')
        f.write('  width: 100%;\n')
        f.write('  background-color: '+ alt_theme_color1 +';\n')
        f.write('}\n')
        f.write('#Bar {\n')
        if status == 0 or status <= 0:
            set_bar_status = 1
        elif status <=7 or status == 7:
            set_bar_status = (100/8)*(status)
        else:
            set_bar_status = 100
        f.write('  width: '+str(set_bar_status)+'%;\n')
        f.write('  height: 5px;\n')
        f.write('  background-color: '+ theme_color +';\n')
        f.write('  font-family: arial, sans-serif;\n')
        f.write('  text-align: left;\n') 
        f.write(' padding: 0px;\n')
        f.write(' margin: 0px;\n')
        f.write(' font-size:13px;\n')
        f.write('}\n')
        f.write('</style>\n')
        f.write('</head>\n')
        f.write('<body style=\'background-color: '+ theme_color1 +';\'>\n')
        progress_marker = '<a>' + progword + '</a>\n'
        f.write(progress_marker)
        f.write('    <div id="Progress">\n')
        f.write('  <div id="Bar"></div>\n')
        f.write('</div>\n')  
        f.write('</body>\n')
        f.write('</html>\n')
        f.close()
        time.sleep(0.5)
        
            

# helper function to run progress thread
def progress_function(dumppath, ds_output, theme_color, theme_color1, theme_color2):
    threading.Thread(target=progress_thread, args=(window,), daemon=True).start()      

# helper function to extract dataset infos       
def dataset_infos(dumppath, ds_log):
    ds_infos =[]
    log_pattern1 = re.compile("\s*===== finishing processed and scaled data from XDS")
    log_pattern2 = re.compile("\s*Spacegroup name\s+")
    log_pattern3 = re.compile("\s*Unit cell parameters\s+")
    log_pattern4 = re.compile("\s*High resolution limit\s+")
    log_pattern5 = re.compile("\s*Diffraction limits & principal axes of ellipsoid fitted to diffraction cut-off surface:")
    process_list = []
    process_no = 0
    process_hit_cntr = 0
    log_check = 1
    log_line = 0
    hit_line = 0
    finish_message = []
    ds_stats = []
    file = os.path.join(dumppath, ds_log)
    log = open (file, 'rt')
    process_list = re.findall(log_pattern1, log.read())
    process_no = len(process_list)
    log.close()
    
    with open (file, 'rt') as log:
        for line in log:
            log_line += 1
            if log_check == 1 :
                if log_pattern1.search(line) != None:  # If pattern search finds a match
                    process_hit_cntr += 1
                    #print(str(process_hit_cntr))
                    if process_hit_cntr == process_no:
                        log_check = 2
            if log_check == 2 :
                if log_pattern2.search(line) != None:
                    mval = re.split(log_pattern2, (line.rstrip('\n')))
                    finish_message.append(mval[1])
                    log_check = 3
            if log_check == 3 :
                if log_pattern3.search(line) != None:
                    mval = re.split(log_pattern3, (line.rstrip('\n')))
                    mvals = re.split('\s+', mval[1])
                    finish_message.append(mvals[0])
                    finish_message.append(mvals[1])
                    finish_message.append(mvals[2])
                    finish_message.append(mvals[3])
                    finish_message.append(mvals[4])
                    finish_message.append(mvals[5])
                    log_check = 4
            if log_check == 4 :
                if log_pattern4.search(line) != None:
                    mval = re.split(log_pattern4, (line.rstrip('\n')))
                    mvals = re.split('\s+', mval[1])
                    finish_message.append(mvals[2])
                    log_check = 5
            if log_check == 5 :
                if log_pattern5.search(line) != None:
                    hit_line = log_line + 4
                if (log_line) < hit_line and log_line > (hit_line - 4):
                    mvals = re.split('\s+', (line.rstrip('\n')))
                    finish_message.append(mvals[1])              
                             
        # gather infos
        try:
            sg = finish_message[0]
            cell = finish_message[1] + ' Å, ' + finish_message[2] + ' Å, ' + finish_message[3] + ' Å, ' + finish_message[4] + '°, ' + finish_message[5] + '°, ' + finish_message[6] + '°'
            iso = finish_message[7] + ' Å'
            aniso = finish_message[8] + ' Å, ' + finish_message[9] + ' Å, ' + finish_message[10] + ' Å'
            ds_infos = [sg, cell, iso, aniso]
            ds_stats = [sg, (finish_message[1] + ', ' + finish_message[2] + ', ' + finish_message[3]), (finish_message[4] + ', ' + finish_message[5] + ', ' + finish_message[6]), finish_message [7], (finish_message[8] + ', ' + finish_message[9] + ', ' + finish_message[10])]
        except:
            ds_infos = ["ERROR","ERROR","ERROR","ERROR"]   
            ds_stats = ['N/A', 'N/A', 'N/A','N/A','N/A'] 
        log.close()
    return [ds_infos, ds_stats]

# Helper function to get screen info
def get_screen_info(sessioninfo):
    os.system('screen -wipe')
    while True:
        check_screen_command = 'screen -ls'
        screencheck = re.compile(sessioninfo)
        check_screen = subprocess.Popen(check_screen_command, stdout=subprocess.PIPE, universal_newlines=True, shell=True)
        output = (check_screen.stdout.readlines())
        for line in output:
            line = line.strip()
            #print(line)
            if screencheck.search(line) != None:
                #print(line)
                #screenargs = ((".").join(line.split())).split(".")
                screenargs = (re.split("[\. \(\)]+", line))
                #for screenarg in screenargs:
                    #print(screenarg)
        return screenargs
        break         
            

#export csv table
def export_csv(dumppath, csv_header, csv_content):
    filetoexport = os.path.join(dumppath, "datasets.csv")
    try:
        f = open(filetoexport, "w")
        line = ';'.join(csv_header)
        f.write(line +'\n')
        for entry in csv_content:
            table_line = ';'.join(entry)
            f.write(table_line +'\n')
        f.close()
        print('')
        print('Exported metadata CSV to:', filetoexport)
        print('') 
    except:
        print('')
        print('Unable to export CSV!')
        print('')

# Helper function for collapsible sections (collapsed)
def collapse(layout, key):
   return sg.pin(sg.Column(layout, key=key, visible = show_errors))



##############################
###MAIN PROGRAM STARTS HERE###
##############################



# first thing: check if you have write access in the current folder
current_path = os.getcwd()
if os.access(current_path, os.W_OK) == False:
    print('')
    print("-----WARNING!-----")
    print("AutoGUI has to be started from a folder where you have permissions to write data!")
    print('')
    sys.exit("Exiting.")

# second thing: check if global config-file is available and read values
if os.path.exists(config_path) == True:
    cfg_inpath = re.compile("inpath = ")
    cfg_outpath = re.compile("outpath = ")
    cfg_browser = re.compile("browser = ")
    cfg_batchprocs = re.compile("batchprocs = ")
    cfg_adxvpath = re.compile("adxvpath = ")
    cfg_outpath = re.compile("outpath = ")
    cfg_preplist = re.compile("preplist = ") 
    cfg_prepclassic = re.compile("prepfolder_classic = ")
    cfg_prepbatch = re.compile("prepfolder_batch = ")
    cfg_dark = re.compile("dark_theme = ")  
    with open (config_path, 'rt') as config:
        for line in config:
            line = line.strip()
            if cfg_inpath.search(line) != None:
                inpath = (re.split(cfg_inpath, line))[-1]
            if cfg_outpath.search(line) != None:
                outpath = (re.split(cfg_outpath, line))[-1] 
            if cfg_browser.search(line) != None:
                browser = (re.split(cfg_browser, line))[-1]
            if cfg_batchprocs.search(line) != None:
                batchprocs = (re.split(cfg_batchprocs, line))[-1]
            if cfg_adxvpath.search(line) != None:
                adxvpath = (re.split(cfg_adxvpath, line))[-1]
            if cfg_preplist.search(line) != None:
                preplist = (re.split(cfg_preplist, line))[-1] 
            if cfg_dark.search(line) != None:
                dark_theme = (re.split(cfg_dark, line))[-1]
                if dark_theme == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    dark_theme = True
                else:
                    dark_theme = False
            if cfg_prepclassic.search(line) != None:
                prepfolder_classic = (re.split(cfg_prepclassic, line))[-1]
                if prepfolder_classic == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_classic = True
                else:
                    prepfolder_classic = False
            if cfg_prepbatch.search(line) != None:
                prepfolder_batch = (re.split(cfg_prepbatch, line))[-1]
                if prepfolder_batch == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_batch = True
                else:
                    prepfolder_batch = False                   
    config.close()
else:
    print('')
    print('Global configuration file not found.')
    print('Falling back to default configuration.')
    print('')    

# third thing: check if personal config-file is available and read values
if os.path.exists(personal_config) == True:
    print("Personal config file found.")
    cfg_inpath = re.compile("inpath = ")
    cfg_outpath = re.compile("outpath = ")
    cfg_preplist = re.compile("preplist = ") 
    cfg_prepclassic = re.compile("prepfolder_classic = ")
    cfg_prepbatch = re.compile("prepfolder_batch = ")
    cfg_dark = re.compile("dark_theme = ")  
    cfg_highlight = re.compile("theme_highlight_color = ")
    with open (personal_config, 'rt') as config:
        for line in config:
            line = line.strip() 
            if cfg_dark.search(line) != None:
                dark_theme = (re.split(cfg_dark, line))[-1]
                if dark_theme == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    dark_theme = True
                else:
                    dark_theme = False
            if cfg_prepclassic.search(line) != None:
                prepfolder_classic = (re.split(cfg_prepclassic, line))[-1]
                if prepfolder_classic == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_classic = True
                else:
                    prepfolder_classic = False
            if cfg_prepbatch.search(line) != None:
                prepfolder_batch = (re.split(cfg_prepbatch, line))[-1]
                if prepfolder_batch == ("True" or "true" or "TRUE" or "y" or "Y" or "yes" or "Yes" or "YES"):
                    prepfolder_batch = True
                else:
                    prepfolder_batch = False
            if cfg_inpath.search(line) != None:
                inpath = (re.split(cfg_inpath, line))[-1]
            if cfg_outpath.search(line) != None:
                outpath = (re.split(cfg_outpath, line))[-1]
            if cfg_preplist.search(line) != None:
                preplist = (re.split(cfg_preplist, line))[-1]  
            if cfg_highlight.search(line) != None:
                theme_highlight_color = (re.split(cfg_highlight, line))[-1]                                               
    config.close()
else:
    print('')
    print('Personal configuration file not found.')
    print('Falling back to default parameters.')
    print('')    
outpath = os.path.expanduser(outpath)

# Check if screen session id is supplied and make adjustments
if len(sys.argv) != 1:
    #print(str(len(sys.argv)))
    screen = True
    screenid = sys.argv[1]
    print('')
    print('Running in screen with ID: ' + screenid)
    print('')
    win_title = 'AutoGUI-BATCHelor ' + version + ' running in screen: ' + screenid
    if screenid == 'dummy_screen_id':
        kill_visible = True
    else:    
        kill_visible = False
    if len(sys.argv) >= 3:
        print('***DEBUG MODE***')
        print("All output will be saved into 'autogui_debug.log'")
        print("Additional faults might show up in 'autogui_batch_faults.log'")
        print('')
        debug = True
        echo_out = False
        reroute_out = False
        fault_out = open(os.path.join(current_path, "autogui_batch_faults.log"), mode="w")
        faulthandler.enable(fault_out)
else:
    print('')
    print('Running in terminal')
    print('')
    screen = False
    screenid = ''
    kill_visible = True
    
## GUI THEME DEFINITIONS


if dark_theme == True:
    # Definition of dark GUI theme
    theme_color = theme_highlight_color                    # theme highlight color
    theme_color1 =  dark_theme_color                       # theme background color
    theme_color2 = 'white'                                 # theme text color
    theme_color3 = '#2b2a32'                               # theme button and input text color
else:
    # Definition of light GUI theme
    theme_color = theme_highlight_color                   # theme highlight color
    theme_color1 = light_theme_color                      # theme background color
    theme_color2 = 'black'                                # theme text color
    theme_color3 = 'white'                                # theme button and input text color

Color_Theme = {'BACKGROUND': theme_color1,
               'TEXT': theme_color2,
               'INPUT': theme_color,
               'TEXT_INPUT': theme_color3,
               'SCROLL': theme_color,
               'BUTTON': (theme_color3, theme_color),
               'PROGRESS': (theme_color, '#D0D0D0'),
               'BORDER': 0,
               'SLIDER_DEPTH': 0,
               'PROGRESS_DEPTH': 0}


# Add your dictionary to the PySimpleGUI themes
sg.theme_add_new('AutoTheme', Color_Theme)

# Set PySimpleGui Theme and define options
sg.theme('AutoTheme')
sg.set_options(font = 'Arial 12', titlebar_background_color = theme_color1, titlebar_text_color = theme_color2, titlebar_icon = ag_icon, icon = ag_icon)


# gui definition


column1 = [[sg.Text('Select parent folder of datasets:',size=(30,1), font = 'Arial 14')],
           [sg.InputText(default_text="Folder with datasets (in subfolders)",key='-IMGS-',size=(50,2), enable_events = True), sg.Button(button_text = "Browse", tooltip = 'Browse', key = '-DATABROWSE-')]]

column3 = [[sg.Text('Select parent folder for output:',size=(60,1), font = 'Arial 14')],
           [sg.InputText(default_text="Folder for data processing",key='-OUTF-',size=(50,2)),sg.Button(button_text = "Set", tooltip = 'Sets current folder as output folder', key = '-SETCURRENT-', enable_events = True), sg.FolderBrowse(initial_folder = outpath, button_text = "Browse", tooltip = 'Browse', target = ('-OUTF-')),]]


section_debug = [[sg.Text('Error console', font = 'Arial 12', text_color = theme_color)],
                 [sg.Multiline(size=(136,3), key='-ERROR-', font = "Courier 11", reroute_stderr = reroute_out, write_only = True, autoscroll = True)]]   

section_console = [[sg.Multiline(size=(132,6), key='-OUTPUT-', font = "Courier 11", reroute_stdout = reroute_out, reroute_stderr = False, write_only = True, autoscroll = True)]]
                                                                      

layout = [[sg.Frame(layout= [
                   [sg.Column([[sg.Text('Select mode: ', font = 'Arial 14'), sg.Combo(("Synchrotron: EIGER", "Synchrotron: EIGER (mini-cbf conversion)", "Synchrotron: PILATUS (& others)")
                    , default_value = 'Synchrotron: EIGER', key = '-DETSEL-', size=(41,3), readonly = True, change_submits = True, enable_events = True
                    , tooltip = 'PILATUS (& others) should be also okay for older CCDs and image plates.\nEIGER datasets will only be found in "EIGER modes".\nNon-EIGER datasets will only be found in "PILATUS (& others)" mode.\nUse EIGER with mini-cbf conversion only if normal EIGER data processing does not work!')]], size = (465, 45)),
                    sg.Frame(layout = [
                        [sg.Col([[sg.Text(welcome, font = 'Arial 14', justification = 'left', size =(53, None), background_color = None, text_color =theme_color, key = '-ABOUT-', enable_events = True, tooltip = 'About'),sg.Button('', key ='-LOGOBUTTON-', image_data=ag_icon, image_subsample = 2, border_width = 0, button_color=(sg.theme_background_color(),sg.theme_background_color()), enable_events = True, tooltip = 'About')]],
                         size =(490,50))]],title= None,title_color=theme_color, relief=sg.RELIEF_GROOVE, element_justification = "center", vertical_alignment='center')],
                   [sg.Frame(layout=[
                            [sg.Col([ 
                                [sg.Column(column3,size = (515,70)), sg.Column(column1, key = '-INP1-', visible = True ,size = (420,70))],
                                [sg.Col([[
                                    sg.Frame(layout=[ 
                                        [sg.Col([[
                                            sg.Button("+", key = '-+-', size = (2,1), tooltip = "Scan subfolders and add found datasets."),
                                            sg.Button("-", key = '---', size = (2,1), tooltip = " Remove selected dataset from list.\nIf no dataset is selected, the last dataset from the list will be removed."),
                                            sg.Text('        '),
                                            sg.Button(" Clear ", size = (6,1), tooltip = "Clear list of datasets.")]
                                        ], size = (170,40), vertical_alignment ="center")]    
                                    ], title='Add/remove datasets',title_color=theme_color2, relief=sg.RELIEF_GROOVE, vertical_alignment ="center"),
                                sg.Frame(layout=[  
                                  [sg.Column([[sg.Combo(("CC(1/2) >= 0.3 (default)", "I/sig(I) >= 2.0 (mostly)"), default_value = "CC(1/2) >= 0.3 (default)", key = '-CUTMODESEL-', size =(22, None)
                                                                             , readonly = True, change_submits = True, enable_events = True
                                                                             , tooltip = "New default behavior: Cutoff determination only based on CC(1/2) >= 0.3\nOld default behavior: Cutoff determined depending on I/sig(I) >= 2.0 (mostly), CC(1/2) >= 0.3, Rpim <= 0.6")]], size = (180,40), vertical_alignment ="center")]
                                ], title='High resolution cutoff criteria',title_color=theme_color2, relief=sg.RELIEF_GROOVE, vertical_alignment ="center"),
                                sg.Frame(layout=[   
                                  [sg.Column([[sg.Checkbox('Fast', key = '-FASTPROC-', enable_events=True, default= modeselector['fast'], tooltip = "-M fast"), 
                                            sg.Text(' \u279C ', text_color= theme_color),sg.Checkbox('Normal', key = '-NORMALPROC-', enable_events=True, default= modeselector['normal'], tooltip = "autoPROC default"), 
                                            sg.Text(' \u279C ', text_color= theme_color), 
                                            sg.Checkbox('Problematic', key = '-PROBLEMATICPROC-', enable_events=True, default= modeselector['problematic'], tooltip = "-M LowResOrTricky")
                                            ]], size = (300,40), vertical_alignment ="center")]
                                ], title='Processing modes to try',title_color=theme_color2, relief=sg.RELIEF_GROOVE, vertical_alignment ="center"),
                                sg.Frame(layout=[  
                                  [sg.Column([
                                      [sg.Checkbox("Clean up processing output", key = '-CLEANUP-', enable_events=True, default = True,
                                tooltip = 'Disk usage will be reduced by deleting output files that are unlikely to be required\nAll files required for the HTML-log and all .log and .LP files will be preserved.')]], size = (205,40))]
                                ], title='Data saving',title_color=theme_color2, relief=sg.RELIEF_GROOVE, vertical_alignment ="center")
                                ]], size = (950,85), vertical_alignment ="center")]           
                            ], size = (965, 165))]
                        ], title='Batch data processing setup',title_color=theme_color, relief=sg.RELIEF_GROOVE)],
                        [sg.Frame(layout=[
                           [sg.Col([ 
                                [sg.Listbox(datasets, size=(117,12), key='-DATASETS-', font="Courier 13", enable_events = True)]
                            ], size = (965, 180))]
                        ], title='Datasets in queue',title_color=theme_color, relief=sg.RELIEF_GROOVE)],
                        [sg.Frame(layout=[
                            [sg.Col([
                                [sg.Col([[sg.Column([[sg.Text("Prefix:")],[sg.InputText(default_text='', key = '-SELECTED-', size = (27, None), readonly = True, text_color = "black", disabled_readonly_background_color = "#D0D0D0", tooltip = "Identifier of currently selected dataset")]]),  
                                  sg.Column([[sg.Text("Images:")],[sg.InputText(default_text='', key = '-NUMIMGS-', size = (14, None), readonly = True, text_color = "black", disabled_readonly_background_color = "#D0D0D0", tooltip = "Images in currently selected dataset")]]),     
                                  sg.Column([[sg.Text("Output folder:", size = (18, None))],
                                             [sg.InputText(default_text='', key = '-ELEMOUT-', size = (59, None), disabled = False, tooltip = "Output folder for currently selected dataset")]]),
                                  sg.Column([[sg.Text('')], [sg.Button("Info", tooltip = "Data collection info", disabled = True, key = '-DSINFO-', pad = (0,0,0,0))]]),
                                  sg.Column([[sg.Text('')], [sg.Button("Check images in Adxv", tooltip = "Launches external diffraction image viewer", disabled = True, key = '-ADXV-', pad = (4,0,0,0))]])]], size = (950,70))], 
                                [sg.Col([[sg.Column([[sg.Checkbox("Supply additional parameters:", key = '-PARSON-', enable_events=True, disabled = True),sg.Text('(Help)', text_color = theme_color, font = "Courier 10 bold", key='-WEB-', enable_events=True, tooltip='Click here to open autoPROC parameter list in browser.')],
                                                 [sg.InputText(default_text='', key = '-EXTRAPARS-', size = (124, None), disabled = True, tooltip = 'Everything in this line is added to the command line.\nParameters are usualy given in the format variable="value"\nPlease separate multiple parameters by spaces.\ne.g. beam="1532 1543" symm="P21"\nCheck autoPROC documentation for usage by clicking on "Help" above')]]), 
                                  sg.Column([[sg.Text('')], [sg.Button("Apply", tooltip = "Apply output path extra parameters", disabled = True, key = '-UPDATE-', pad = (0,0,0,0))]])]], size = (950,70))] 
                            ], size = (965, 150))]
                        ], title='Selected dataset options',title_color=theme_color, relief=sg.RELIEF_GROOVE)],
                         
                    [sg.Column([[sg.Button('Run',key ='-RUN-', disabled = True, button_color ='white on green', tooltip = 'GoGoGo'), sg.Button('Quit', button_color = 'yellow on red', tooltip = 'Bail out!'),
                                 sg.Button('Kill previous job',key ='-KILL-', visible = kill_visible, mouseover_colors = "yellow on red", tooltip = 'Kill stuck previous job via PID')]],
                               size = (650, 40), vertical_alignment ="top", justification ="left", element_justification ="left"),
                     sg.Column([[sg.Text('\u2691  Ready.', text_color = theme_color, key = '-STATUS-', font = 'Arial 14', justification = 'right', size = (37, None), tooltip = "Program status")]], size = (305, 40), vertical_alignment ="top")],
                    [sg.HorizontalSeparator()],
                    [sg.Frame(layout=[
                        [sg.Col([
                            [sg.Column(section_console)]
                        ], size = (965, 95))]
                    ], title='Console',title_color=theme_color, relief=sg.RELIEF_GROOVE)],
                    [collapse(section_debug, '-DEBUG-')],
                    [sg.Text('', font = 'Courier 1')]],title = None, relief = None, border_width = 0, pad = (0,0,0,00))]]


                                             
                  
# create window
window = sg.Window(win_title, layout, no_titlebar=False, grab_anywhere=False, resizable=False, finalize=True, location = (300, 100))

if screen == True:
    print('Running in screen with ID: ' + screenid)
    print('')
else:
    print('Running in terminal window')
    print('')

# leave message if in debug mode
if debug == True:
    window['-OUTPUT-'].print('***DEBUG MODE***')
    window['-OUTPUT-'].print('')
    window['-OUTPUT-'].print('No output in this window!')
    window['-OUTPUT-'].print('All output will be on the console.')
    window['-OUTPUT-'].print("All output will be also written to 'autogui_debug.log'")
    window['-OUTPUT-'].print('')
    window['-OUTPUT-'].print('***DEBUG MODE***')

#do stuff
while True:
    event, values = window.read()

    # set current directory as output
    if event == '-SETCURRENT-':
        window['-OUTF-'].update(os.getcwd())

    # detector selection
    if event == '-DETSEL-':
        datasets = []
        data_display = []
        window['-DATASETS-'].update(data_display)
        if values['-DETSEL-'] == "Synchrotron: EIGER (mini-cbf conversion)":
            EIGER = True
            h52cbf = True
            # warn for duration of mini-cbf conversion
            layout_cbf = [[sg.Text('Attention!', justification = "center", font = "Arial 12", text_color = "red")],
                   [sg.Text('Use the EIGER mini-cbf conversion mode only if direct processing of HDF5 files does not work!')],
                   [sg.Text('Conversion of .h5 to .cbf may take longer than the actual data processing!')],
                   [sg.Button('Got it', highlight_colors = (theme_color, theme_color))]]           
            window_cbf = sg.Window('Attention', layout_cbf, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
            while True:
                event_cbf, values_cbf = window_cbf.read()
                if event_cbf == sg.WIN_CLOSED or event_cbf == 'Got it':
                    window_cbf.close()
                    layout_cbf = None
                    window_cbf = None
                    gc.collect()
                    break
        elif values['-DETSEL-'] == "Synchrotron: EIGER":
            EIGER = True
            h52cbf = False

        else:      
            EIGER = False
            h52cbf = False
            

    # select browsing folder for data
    if event == '-DATABROWSE-':
        homedir = '~/'
        currentdir = outpath
        if os.path.exists(values['-IMGS-']) == True:
            currentdir = values['-IMGS-']
            currentdirdisabled = False
        else:
            currentdirdisabled = True
        layout_databrowse = [[sg.Text('Select browsing origin:'), sg.Input(key='-DATABROWSEPATH-', visible=False, enable_events=True),],
                             [sg.FolderBrowse(initial_folder = inpath, size = (20, 1), button_text = 'Data directory', tooltip = 'Browse data directory', target = '-DATABROWSEPATH-')],
                             [sg.FolderBrowse(initial_folder = currentdir, size = (20, 1), button_text = 'Current directory', tooltip = 'Browse current data directory', target = '-DATABROWSEPATH-', disabled = currentdirdisabled)],
                             [sg.FolderBrowse(initial_folder = outpath, size = (20, 1), button_text = 'Working directory', tooltip = 'Browse working directory', target = '-DATABROWSEPATH-')],
                             [sg.FolderBrowse(initial_folder = homedir, size = (20, 1), button_text = 'Home directory', tooltip = 'Browse home directory', target = '-DATABROWSEPATH-')]]
        window_databrowse = sg.Window('Data:', layout_databrowse, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_databrowse, values_databrowse = window_databrowse.read()
            if event_databrowse == '-DATABROWSEPATH-':
                if re.search(" ", values_databrowse['-DATABROWSEPATH-']) != None:
                    print('')
                    print('Problem found in:', values_databrowse['-DATABROWSEPATH-'])
                    print('Input path must not contain any white space characters!')
                    msg = 'Input path must not contain any white space characters!'
                    window['-STATUS-'].update(value = msg, text_color = 'red')
                    window['-+-'].update(button_color  =(theme_color1, theme_color))
                else:    
                    window['-IMGS-'].update(values_databrowse['-DATABROWSEPATH-'])
                    window_databrowse.close()
                    layout_databrowse = None
                    window_databrowse = None
                    gc.collect()
                    window['-+-'].update(button_color  =("white on green"))
                    msg = 'Click "+" to add datasets.'
                    window['-STATUS-'].update(value = msg, text_color = theme_color)
                    break
            if event_databrowse == sg.WIN_CLOSED:
                window_databrowse.close()
                layout_databrowse = None
                window_databrowse = None
                gc.collect()                
                break       

   # sweep definition
    if event == '-+-': 
        imgpath = values['-IMGS-']
        outpath = values['-OUTF-']

        if os.path.exists(imgpath) == False:
            print('')
            print('Data folder does not exist.')
            window['-STATUS-'].update(value = "Data folder does not exist!", text_color = "dark red")
        elif os.path.exists(outpath) == False:
            print('')
            print('Output folder does not exist.')
            window['-STATUS-'].update(value = "Output folder does not exist!", text_color = "dark red")
        elif re.search(" ", imgpath) != None:
            print('')
            print('Problem found in:', imgpath)
            print('Input path must not contain any white space characters!')
            msg = 'Input path must not contain any white space characters!'
            window['-STATUS-'].update(value = msg, text_color = 'red')
        elif re.search(" ", outpath) != None:
            print('')
            print('Problem found in:', outpath)
            print('Output path must not contain any white space characters!')
            msg = 'Output path must not contain any white space characters!'
            window['-STATUS-'].update(value = msg, text_color = 'red') 
        else:               
            #retrieve sweeps by parsing hits from find_file in helper function    
            print('')
            print("Searching for datasets, this may take a while...")
            print('')
            window['-STATUS-'].update(value = "Searching, this may take a while...", text_color = '#FFCB34' )
            time.sleep(0.5)
            hits = []
            find_sweeps(imgpath, EIGER)
    if event == '-HITS-':
        #print('Datasets found!')
        hits = values['-HITS-']
        numfoundhitsskipped = 0
        previous_datasets = datasets
        datasets = []

        for hit in hits:
            sweep = hit.split(",")
            if re.search(" ", sweep[1]) != None:
                print('')
                print('Problem with dataset:', sweep[1])
                print('Skipping found dataset white spaces in path name!')
                msg = 'Skipping found dataset white spaces in path name!'
                window['-STATUS-'].update(value = msg, text_color = 'red')
                numfoundhitsskipped = numfoundhitsskipped + 1
                hits.pop(hit)
            else:    
                sweep.append(imgpath)
                sweep.append(outpath)
                sweep.append('deprecated')
                sweep.append('  ')
                sweep.append('')
                datasets.append(sweep)
                print(hit)
            
        # split sweeps into parameter lists          
        # only continue if there are datasets found at all
        if len(hits) < 1 or len(datasets[0]) < 10:
            if numfoundhitsskipped > 0:
                print('')
                print(str(numfoundhitsskipped), 'datasets have been skipped due to errors!')
                print("Please remove white spaces from path names!")
                print('')
                window['-STATUS-'].update(value = "All datasets have been skipped due to errors!", text_color = "dark red") 
            else:
                if len(previous_datasets[0]) < 10:
                    print('')
                    print("No datasets found!")
                    print("Detector mode correct? (EIGER/PILATUS)")
                    print('')
                    window['-STATUS-'].update(value = "No datasets found!", text_color = "dark red")
                else:
                    datasets = previous_datasets
                    print('')
                    print("No additional datasets found!")
                    print("Detector mode correct? (EIGER/PILATUS)")
                    print('')
                    msg = "Found " + str(len(datasets)) + " datasets previously."
                    print(msg + " in " + imgpath + ":")
                    print('')
                    window['-STATUS-'].update(value = msg, text_color = theme_color)         
                    data_display = make_data_display(datasets)
                    window['-DATASETS-'].update(data_display)
                    print("\n".join(data_display))
                    #print(datasets)
                    print("")
                    window['-RUN-'].update(disabled = False)
                    window['-+-'].update(button_color = (theme_color1, theme_color))        
        else:
            if numfoundhitsskipped > 0:
                print('')
                print(separator)
                print('')
                print(str(numfoundhitsskipped), 'datasets have been skipped due to errors!')
                print("Please remove white spaces from path names!")
                print('')
                msg = "Found " + str(len(datasets)) + " valid datasets. " + str(numfoundhitsskipped) + " datasets skipped."
                window['-STATUS-'].update(value = msg, text_color = "orange")
            else:    
                print('')
                print(separator)
                print('')
                msg = "Found " + str(len(datasets)) + " datasets."
                print(msg + " in " + imgpath + ":")
                print('')
                window['-STATUS-'].update(value = msg, text_color = theme_color)
            for dataset in datasets:
                if dataset[5].endswith("/") == False:
                    datapath = "".join(dataset[1].split(dataset[5] + "/"))
                else:
                    datapath = "".join(dataset[1].split(dataset[5]))
                if datapath == dataset[5] or (datapath == dataset[5] + "/"):
                    dataset[6] = os.path.join(dataset[6], dataset[0])
                else:
                    dataset[6] = os.path.join(dataset[6], datapath)
            datasets = previous_datasets + datasets           
            data_display = make_data_display(datasets)
            window['-DATASETS-'].update(data_display)
            print("\n".join(data_display))
            #print(datasets)
            print("")
            window['-RUN-'].update(disabled = False)
            window['-+-'].update(button_color = (theme_color1, theme_color))

    # make at least sure one processing mode is selected
    if event == '-FASTPROC-' or event == '-NORMALPROC-' or event == '-PROBLEMATICPROC-':
        if values['-FASTPROC-'] == False and values['-NORMALPROC-'] == False and values['-PROBLEMATICPROC-'] == False:
            window['-FASTPROC-'].update(value = True)
            window['-NORMALPROC-'].update(value = True)
            window['-PROBLEMATICPROC-'].update(value = True)

    # click on datasets
    if event == '-DATASETS-':
        if len(datasets) > 0:
            ds_index = (data_display.index(values['-DATASETS-'][0]))
            window['-SELECTED-'].update(value = (datasets[ds_index])[0], disabled = False)
            imgrange = str(int((datasets[ds_index])[4]) - (int((datasets[ds_index])[3]) - 1))
            window['-NUMIMGS-'].update(value = imgrange, disabled = False)
            window['-ELEMOUT-'].update(value = (datasets[ds_index])[6], disabled = False)
            window['-UPDATE-'].update(disabled = False)
            print('')
            print("You selected", (datasets[ds_index])[0], "in", (datasets[ds_index])[1], "with", imgrange, "images")
            print("Processing output will go to", (datasets[ds_index])[6])
            if (datasets[ds_index])[8] == '\u2691 ':
                print("Dataset has additional processing parameters or non-standard output path!")
            procmodes = ''
            if values['-FASTPROC-'] == True:
                procmodes = procmodes + '-fast- '
            if values['-NORMALPROC-'] == True:
                procmodes = procmodes + '-normal- '
            if values['-PROBLEMATICPROC-'] == True:
                procmodes = procmodes + '-problematic- '        
            print("Processing modes to try:", procmodes)
            if os.path.exists(os.path.join((datasets[ds_index])[1], 'info.txt')) == True:
                window['-DSINFO-'].update(disabled = False)
            else:
                print('Detailed data collection info is not available')
                window['-DSINFO-'].update(disabled = True)
            window['-ADXV-'].update(disabled = False)
            window['-PARSON-'].update(disabled = False)
            if (datasets[ds_index])[9] != '':
                window['-PARSON-'].update(value = True)
                window['-EXTRAPARS-'].update(disabled = False)
                window['-EXTRAPARS-'].update(value = (datasets[ds_index])[9])
                print("Additional non-default processing arguments found:\n", (datasets[ds_index])[9])
            else:
                window['-PARSON-'].update(value = False)
                window['-EXTRAPARS-'].update(disabled = True)
                window['-EXTRAPARS-'].update(value = '')
            print('') 

    if event == '-PARSON-' and values['-PARSON-'] == True:
        window['-EXTRAPARS-'].update(disabled = False)
        window['-EXTRAPARS-'].update(value = (datasets[ds_index])[9])

    if event == '-PARSON-' and values['-PARSON-'] == False:
        window['-EXTRAPARS-'].update(disabled = True)
        window['-EXTRAPARS-'].update(value = '')    

    if event == '-UPDATE-':
        layout_apply = [[sg.Text("Apply to current or all datasets?")],
                        [sg.Text("Changes to the output path can only be made for the selected dataset.")],
                        [sg.Text("Extra processing parameters can be set for the selected or all datasets.")],
                        [sg.Text("")],
                        [sg.Button('Current', tooltip = 'Change path & parameters for current dataset only.'),
                         sg.Button('All', tooltip = 'Change parameters for all datasets & path for current dataset only.'),  
                         sg.Button('Cancel')]]
        window_apply = sg.Window('Apply changes?', layout_apply, no_titlebar=False, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_apply, values_apply = window_apply.read()
            if event_apply == sg.WIN_CLOSED or event_apply == 'Cancel':
                window_apply.close()
                layout_apply = None
                window_apply = None
                gc.collect()
                break
            if event_apply == 'Current':
                window_apply.close()
                layout_apply = None
                window_apply = None
                gc.collect()
                old_elemout = (datasets[ds_index])[6]
                old_params= (datasets[ds_index])[9]
                new_elemout = values['-ELEMOUT-']
                if re.search(" ", new_elemout) != None:
                    print('White spaces in', new_elemout, 'have been replaced with "_"')
                    mod_elemout = re.sub(" ", "_", new_elemout)
                    new_elemout = mod_elemout
                    print('')
                (datasets[ds_index])[6] = new_elemout
                (datasets[ds_index])[9] = values['-EXTRAPARS-']
                if (datasets[ds_index])[6] == old_elemout and (datasets[ds_index])[9] == old_params :
                    msg = "No changes have been made."
                    window['-STATUS-'].update(value = msg, text_color = theme_color)
                else:    
                    (datasets[ds_index])[8] = '\u2691 '    
                    data_display = make_data_display(datasets)
                    window['-DATASETS-'].update(data_display)
                    msg = "Updated parameters for dataset " + (datasets[ds_index])[0] + "."
                    window['-STATUS-'].update(value = msg, text_color = theme_color)
                    ds_index = -1
                    window['-SELECTED-'].update(value = '')
                    window['-NUMIMGS-'].update(value = '')
                    window['-ELEMOUT-'].update(value = '')
                    window['-UPDATE-'].update(disabled = True)
                    window['-DSINFO-'].update(disabled = True)
                    window['-ADXV-'].update(disabled = True)
                    window['-PARSON-'].update(disabled = True)
                    window['-EXTRAPARS-'].update(disabled = True)
                    window['-EXTRAPARS-'].update(value = '')
                break
            if event_apply == 'All':
                window_apply.close()
                layout_apply = None
                window_apply = None
                gc.collect()
                old_elemout = (datasets[ds_index])[6]
                new_elemout = values['-ELEMOUT-']
                if re.search(" ", new_elemout) != None:
                    print('White spaces in', new_elemout, 'have been replaced with "_"')
                    mod_elemout = re.sub(" ", "_", new_elemout)
                    new_elemout = mod_elemout
                    print('')
                (datasets[ds_index])[6] = new_elemout
                for any_dataset in datasets:
                    old_params= (any_dataset)[9]
                    (any_dataset)[9] = values['-EXTRAPARS-']
                    if (any_dataset)[9] != old_params:
                        (any_dataset)[8] = '\u2691 '    
                if (datasets[ds_index])[6] != old_elemout:    
                    (datasets[ds_index])[8] = '\u2691 '    
                data_display = make_data_display(datasets)
                window['-DATASETS-'].update(data_display)
                msg = "Processing parameters for all datasets have been updated."
                window['-STATUS-'].update(value = msg, text_color = theme_color)
                ds_index = -1
                window['-SELECTED-'].update(value = '')
                window['-NUMIMGS-'].update(value = '')
                window['-ELEMOUT-'].update(value = '')
                window['-UPDATE-'].update(disabled = True)
                window['-DSINFO-'].update(disabled = True)
                window['-ADXV-'].update(disabled = True)
                window['-PARSON-'].update(disabled = True)
                window['-EXTRAPARS-'].update(disabled = True)
                window['-EXTRAPARS-'].update(value = '')
                break            

            
    if event == '---' and len(datasets) > 0:
        print("")
        del datasets[ds_index]
        print("Removed dataset from list")
        data_display = make_data_display(datasets)
        window['-DATASETS-'].update(data_display)
        msg = str(len(datasets)) + " datasets in list."
        window['-STATUS-'].update(value = msg, text_color = theme_color)
        ds_index = -1
        print("")
        window['-SELECTED-'].update(value = '')
        window['-NUMIMGS-'].update(value = '')
        window['-ELEMOUT-'].update(value = '')
        window['-UPDATE-'].update(disabled = True)
        window['-DSINFO-'].update(disabled = True)
        window['-ADXV-'].update(disabled = True)
        window['-PARSON-'].update(disabled = True)
        window['-EXTRAPARS-'].update(disabled = True)
        window['-EXTRAPARS-'].update(value = '')
        if len(datasets) == 0:
            window['-RUN-'].update(disabled = True)

    if event == 'Clear':
        print("")
        datasets = []
        previous_datasets = []
        data_display = []
        print("Cleared list of datasets")
        window['-DATASETS-'].update(data_display)
        window['-STATUS-'].update(value = "Cleared list of datasets.", text_color = theme_color)
        print("")
        window['-SELECTED-'].update(value = '')
        window['-NUMIMGS-'].update(value = '')
        window['-ELEMOUT-'].update(value = '')
        window['-UPDATE-'].update(disabled = True)
        window['-RUN-'].update(disabled = True)
        window['-DSINFO-'].update(disabled = True)
        window['-ADXV-'].update(disabled = True)
        window['-PARSON-'].update(disabled = True)
        window['-EXTRAPARS-'].update(disabled = True)
        window['-EXTRAPARS-'].update(value = '')


        # enable/disable data saving mode
    if (event == '-CLEANUP-') and (values['-CLEANUP-'] == True):
        datasaving = True
    if (event == '-CLEANUP-') and (values['-CLEANUP-'] == False):
        layout_datasaving = [[sg.Text('Do you really want to disable cleanup?', justification = "center", font = "Arial 12", text_color = "red")],
               [sg.Text('Cleaning up files that are almost certainly not required can reduce disk usage by up to 80 %!')],
               [sg.Text('')],              
               [sg.Text('Files required for display of the HTML and any .log or .LP files will be preserved in any case.\nFiles that may be required for PDB deposition or manual data processing or analyses\nwill be in any case be preserved in the "useful_files" subfolder.\nThis includes the final XDS.INP, XDS_ASCII.HKL, INTEGRATE_HKL, CORRECT.LP,\naimless.log and pdb/cif files with remark200 sections.')],
               [sg.Text('')],
               [sg.Text('Please disable cleanup only if you have a very good reason!',font = "Arial 12", text_color = "red")],                       
               [sg.Button('Leave it on', highlight_colors = (theme_color, theme_color)), sg.Button('Disable', highlight_colors = (theme_color, theme_color))]]           
        window_datasaving = sg.Window('Attention', layout_datasaving, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_datasaving, values_datasaving = window_datasaving.read()
            if event_datasaving == 'Disable':
                datasaving = False
                window_datasaving.close()
                layout_datasaving = None
                window_datasaving = None
                gc.collect()
                break
            if event_datasaving == sg.WIN_CLOSED or event_datasaving == 'Leave it on':
                datasaving = True
                window['-CLEANUP-'].update(value = True)
                window_datasaving.close()
                layout_datasaving = None
                window_datasaving = None
                gc.collect()
                break


    if event == '-KILL-':
        layout_kill = [[sg.Text(" \u2620   Enter PID of the previous job to kill   \u2620 ", justification = "center")],
                       [sg.InputText(default_text='', key = '-PIDKILL-', size = (37, None), disabled = False, tooltip = "Enter launch codes.\nErr...I mean PID of a hanging batch processing job.")],
                       [sg.Text('The PID can be found in the lower right\ncorner of the corresponding "batchproc.html.')],
                       [sg.Button('Kill', tooltip = 'Fire'), sg.Button('Cancel')]]
        window_kill = sg.Window('The Football \u2620', layout_kill, no_titlebar=False, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_kill, values_kill = window_kill.read()
            if event_kill == sg.WIN_CLOSED or event_kill == 'Cancel':
                window_kill.close()
                layout_kill = None
                window_kill = None
                gc.collect()
                break
            if event_kill == 'Kill':
                if values_kill['-PIDKILL-'] != '':
                    killpid = int(values_kill['-PIDKILL-'])
                    including_parent = True
                    killtree(killpid, including_parent)
                window_kill.close()
                layout_kill = None
                window_kill = None
                gc.collect()
                break
            
# show dataset_info
    if event == '-DSINFO-':
        print('')
        if os.path.exists(os.path.join(os.path.join((datasets[ds_index])[1], 'info.txt'))) == True:
            f =  open(os.path.join(os.path.join((datasets[ds_index])[1], 'info.txt')), "r")
            dsinfofile = f.read()
            #print('Beamline settings for this dataset:')
            #print(dsinfofile)
            #print('')
            f.close()
        else:
            dsinfofile = 'No beamline information available'
        layout_info = [[sg.Text('Beamline settings for this dataset:', justification = "left", font = "Arial 12", text_color = theme_color)],
                       [sg.Multiline(default_text = dsinfofile, size=(40,15), key='-DSINFOS-', write_only = True, background_color = theme_color1, font = "Courier 10", text_color = theme_color2, autoscroll = False)],
                       [sg.Text('')],
                       [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]           
        window_info = sg.Window('Data collection parameters', layout_info, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_info, values_info = window_info.read()
            if event_info == sg.WIN_CLOSED or event_info == 'Okay':
                window_info.close()
                layout_info = None
                window_info = None
                gc.collect()
                break

# open autoPROC parameter list in browser
    if event == '-WEB-':
        silent = True
        utility_command = browser + " http://www.globalphasing.com/autoproc/manual/autoPROC4.html#intro"
        utility_function(utility_command, silent)
        time.sleep(1)
        utility_command = browser + " http://www.globalphasing.com/autoproc/manual/appendix1.html"
        utility_function(utility_command, silent)

# open image folder in Adxv
    if event == '-ADXV-':
        silent = False
        utility_command = adxvpath + ' -rings ' + (datasets[ds_index])[1] + '/'
        utility_function(utility_command, silent)
        print('')
        print('Started Adxv in ', (datasets[ds_index])[1])

# set cutoff determination mode       
    if event == '-CUTMODESEL-':
        if values['-CUTMODESEL-'] == "I/sig(I) >= 2.0 (mostly)":
            oldcutoffmode = True
        else:
            oldcutoffmode = False

# show about section
    if event == '-ABOUT-' or event == '-LOGOBUTTON-':
        layout_about = [[sg.Text(simple_title, justification = "left", font = "Arial 12", text_color = theme_color)],
                               [sg.Text('A simple interface to autoPROC (Global Phasing Ltd.)')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Text('\u00A9 Copyright 2025 Peer Lukat\nHelmholtz-Centre for Infection Research, Structure & Function of Proteins\npeer.lukat@helmholtz-hzi.de\nAutoGUI is released under the GNU General Public License Version 3 (or later).\nThere is (currently) no literature citation for it.')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Text('autoPROC is developed by Global Phasing Limited (UK)\nhttps://www.globalphasing.com')],
                               [sg.Text('For using autoPROC via AutoGUI, please cite:')],
                               [sg.Text('autoPROC:\nVonrhein, C., Flensburg, C., Keller, P., Sharff, A., Smart, O., Paciorek, W.,\nWomack, T. and Bricogne, G. (2011). Data processing and analysis with\nthe autoPROC toolbox. Acta Cryst. D67, 293-302.')],
                               [sg.Text('XDS/XSCALE:\nKabsch, W. (2010). XDS. Acta Cryst. D66, 125-132.')],
                               [sg.Text('POINTLESS:\nEvans, P.R. (2006). Scaling and assessment of data quality, Acta Cryst. D62, 72-82.')],
                               [sg.Text('CCP4:\nWinn, M.D., Ballard, C.C., Cowtan, K.D. Dodson, E.J., Emsley, P., Evans, P.R.,\nKeegan, R.M., Krissinel, E.B., Leslie, A.G.W., McCoy, A., McNicholas, S.J., Murshudov,\nG.N., Pannu, N.S., Potterton, E.A., Powell, H.R., Read, R.J., Vagin, A. and Wilson, K.S.\n(2011). Overview of the CCP4 suite and current developments, Acta. Cryst. D67, 235-242.')], 
                               [sg.Text('STARANISO:\nTickle, I.J., Flensburg, C., Keller, P., Paciorek, W., Sharff, A., Vonrhein, C.,\nand Bricogne, G. (2018-2021). STARANISO. Cambridge, United Kingdom: Global Phasing Ltd.')],
                               [sg.Text('AutoGUI is also using Adxv:\nArvai, A. Adxv - A Program to Display X-ray Diffraction Images,\nhttps://www.scripps.edu/tainer/arvai/adxv.html')],
                               [sg.HorizontalSeparator(color = None,)],
                               [sg.Button('Okay', highlight_colors = (theme_color, theme_color)), sg.Button('Changelog', button_color = (theme_color, theme_color1), mouseover_colors = (theme_color1, theme_color), highlight_colors = (theme_color, theme_color)), sg.Button('License information', button_color = (theme_color, theme_color1), mouseover_colors = (theme_color1, theme_color), highlight_colors = (theme_color, theme_color)),
                                sg.Text('Toggle error console', size = (35, None), justification = 'right', text_color = '#D0D0D0', tooltip = 'Developer only!'), sg.Checkbox('', tooltip = 'Developer only!', default = show_errors, key = '-ERRTOGGLE-', text_color = '#D0D0D0', enable_events = True)]] 
            
        window_about = sg.Window('About', layout_about, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event_about, values_about = window_about.read()
            if event_about == '-ERRTOGGLE-' and values_about['-ERRTOGGLE-'] == True:
                window['-DEBUG-'].update(visible = True)
                fault_out = open(os.path.join(current_path, "autogui_batch_faults.log"), mode="w")
                faulthandler.enable(fault_out)
                show_errors = True
            if event_about == '-ERRTOGGLE-' and values_about['-ERRTOGGLE-'] == False:
                window['-DEBUG-'].update(visible = False)
                faulthandler.disable()
                fault_out.close()
                show_errors = False
                os.remove(os.path.join(current_path, "autogui_batch_faults.log"))
            if event_about == sg.WIN_CLOSED or event_about == 'Okay':
                window_about.close()
                layout_about = None
                window_about = None
                gc.collect()
                break
            if event_about == 'Changelog':
                layout_changes = [[sg.Multiline(size=(75,20), key='-CHANGELOG-', write_only = True, autoscroll = False, do_not_clear = True, text_color = theme_color, background_color = theme_color1)],
                                  [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]
                window_changes = sg.Window("What's new?", layout_changes, no_titlebar=False, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
                if os.path.exists(changelog_path) == True:
                    f =  open(changelog_path, "r")
                    clog = f.read()
                    window_changes['-CHANGELOG-'].print(clog)
                    window_changes['-CHANGELOG-']. set_vscroll_position(0)
                    f.close()
                else:
                    window_changes['-CHANGELOG-'].print('')
                    window_changes['-CHANGELOG-'].print('autogui_changelog.txt not found!')
                    window_changes['-CHANGELOG-'].print('Sorry!')
                    window_changes['-CHANGELOG-'].print('')
                while True:
                    event_changes, values_changes = window_changes.read()    
                    if event_changes == sg.WIN_CLOSED or event_changes == 'Okay':
                        window_changes.close()
                        layout_changes = None
                        window_changes = None
                        gc.collect()
                        break
                    
            if event_about == 'License information':
                layout_license = [[sg.Multiline(size=(75,20), key='-LICENSE-', write_only = True, autoscroll = False, do_not_clear = True, text_color = theme_color2, background_color = theme_color1)],
                                  [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]
                window_license = sg.Window("GPL-3.0-or-later", layout_license, no_titlebar=False, alpha_channel=1, grab_anywhere=False, finalize = True, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
                
                if os.path.exists(license_path) == True:
                    f =  open(license_path, "r")
                    lic = f.read()
                    window_license['-LICENSE-'].print(lic)
                    window_license['-LICENSE-']. set_vscroll_position(0)
                    f.close()
                else:
                    window_license['-LICENSE-'].print('')
                    window_license['-LICENSE-'].print('COPYING not found!')
                    window_license['-LICENSE-'].print('Sorry!')
                    window_license['-LICENSE-'].print('')
                while True:
                    event_license, values_license = window_license.read()    
                    if event_license == sg.WIN_CLOSED or event_license == 'Okay':
                        window_license.close()
                        layout_license = None
                        window_license = None
                        gc.collect()
                        break        
    
    # close window on exit
    if event == 'Quit':
        layout_quit = [[sg.Text("Do you really want to quit?", justification = "center", font = "Arial 12")],
                       [sg.Text('')],
                       [sg.Button(' Yes ', highlight_colors = (theme_color, theme_color)), sg.Button(' No ', highlight_colors = (theme_color, theme_color))]]
        window_quit = sg.Window('Quit?', layout_quit, no_titlebar=False, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True: 
            event_quit, values_quit = window_quit.read()
            if event_quit == sg.WIN_CLOSED or event_quit == ' No ':
                window_quit.close()
                layout_quit = None
                window_quit = None
                gc.collect()
                break
            if event_quit == ' Yes ':
                window_quit.close()
                layout_quit = None
                window_quit = None
                runflag = False
                window.close()
                layout = None
                window = None
                gc.collect()
                if screen == True:
                    kill_command = 'screen -S ' + screenid + ' -X quit'
                    os.system(kill_command)
                break


    if event == sg.WIN_CLOSED:
        runflag = False
        window.close()
        layout = None
        window = None
        gc.collect()
        if screen == True:
            kill_command = 'screen -S ' + screenid + ' -X quit'
            os.system(kill_command)
        break

  # Start run and close GUI
    if event == '-RUN-':
        num_sets = len(datasets)
        if screen == True:
            sessioninfo = screenid
            screenargs = get_screen_info(sessioninfo)
            PID = int(screenargs[0])
            screenstatus = screenargs[2]
            kill_message = "Screen ID of this job is: " + screenid
            kill_text = 'In case the processing job hangs, you will have\nto kill it and its descendant processes using the\n"Kill previous batch job" function from the Launcher.\nEnter Screen ID of the hanging process,\ndisplayed at the bottom of the batch processing log.\n'
        else:    
            PID = os.getpid()
            kill_message = "PID of this job is: " + str(PID)
            kill_text = 'In case the processing job hangs, you will have\nto kill it and its descendant processes using the\n"Kill previous job" function from the Batch GUI.\nEnter PID of the hanging process, displayed in the\nlower right corner of the batch processing log.\n'
        start_message = "Start batch processing of " + str(num_sets) + " datasets?"
        if (sys.platform == 'darwin') and (screen == True):
            browser_msg = "Please start your browser:\n\n" + browser + "\n\nbefore it is started automatically\nto prevent it from closing when processing is finished!"
            screen_msg = 'MacOS currently prevents screen from starting attached.\nTo be able to see the terminal output from AutoGUI Batch,\nplease type the following line into your terminal:\n\nscreen -r -x ' + screenid
            layout5 = [[sg.Text(start_message, justification = "center", font = "Arial 14")],
                   [sg.Text('')],
                   [sg.HorizontalSeparator(color = None)],
                   [sg.Text("Attention Mac users!", justification = "center", font = "Arial 14", text_color = "red")],
                   [sg.Text(screen_msg)],
                   [sg.Text('')],
                   [sg.Text(browser_msg)],
                   [sg.Text('Alternatively, locate "batchproc.html" after starting\ndata processing and open it in a different browser.')],
                   [sg.HorizontalSeparator(color = None)],
                   [sg.Text('')],
                   [sg.Text("The GUI will close when started and the\nprocessing log will open in a browser window.")],
                   [sg.Text('')],
                   [sg.Button(' Yes ', highlight_colors = (theme_color, theme_color)), sg.Button(' No ', highlight_colors = (theme_color, theme_color))],
                   [sg.Text('')],
                   [sg.HorizontalSeparator(color = None)],
                   [sg.Text(kill_message)], 
                   [sg.Text(kill_text, text_color = '#A0A0A0')],
                   [sg.Text('')],
                   [sg.Text('If there are additional problems with detached operation\nof AutoGUI Batch, consider deactivating the use of screen\nin your AutoGUI preferences.', text_color = '#A0A0A0')]]
        else:    
            layout5 = [[sg.Text(start_message, justification = "center", font = "Arial 14")],
                    [sg.Text('')],
                    [sg.Text("The GUI will close when started and the\nprocessing log will open in a browser window.", justification = "center")],
                    [sg.Text('')],
                    [sg.Button(' Yes ', highlight_colors = (theme_color, theme_color)), sg.Button(' No ', highlight_colors = (theme_color, theme_color))],
                    [sg.Text('')],
                    [sg.HorizontalSeparator(color = None)],
                    [sg.Text(kill_message)], 
                    [sg.Text(kill_text, text_color = '#A0A0A0')]]
        window5 = sg.Window('Ready to start?', layout5, no_titlebar=False, grab_anywhere=False, location = (window.current_location()[0] + 200, window.current_location()[1] + 50 ))
        while True:
            event5, values5 = window5.read()
            if event5 == sg.WIN_CLOSED or event5 == ' No ':
                window5.close()
                layout5 = None
                window5 = None
                gc.collect()
                break
            if event5 == ' Yes ':
                runflag = True
                window5.close()
                layout5 = None
                window5 = None
                gc.collect()                
                break
        if runflag == True:
            outpath = values['-OUTF-']
            modeselector['fast'] = values['-FASTPROC-']
            modeselector['normal'] = values['-NORMALPROC-']
            modeselector['problematic'] = values['-PROBLEMATICPROC-']
            window['-OUTPUT-'].restore_stdout()
            window['-OUTPUT-'].restore_stderr()
            window['-ERROR-'].restore_stdout()
            window['-ERROR-'].restore_stderr()
            window.close()
            layout = None
            window = None
            gc.collect()
            break

# Run data processing in terminal    
if runflag == True:
    start_t = time.time()
    job_t = time.time()
    batchnumber = 1
    #print('Window closed')
    print('')
    print(separator)
    print('')
    while True:
        runpath = 'autobatch_' + str(batchnumber)
        dumppath = os.path.join(outpath, runpath)
        if os.path.exists(dumppath):
            batchnumber += 1
        else:
            os.makedirs(dumppath)
            os.chdir(dumppath)
            os.makedirs("./HTML")
            print('')
            print('Processing run number for this batch: ', str(batchnumber))
            print ('Output will be found in: ./'+ runpath)
            print('')
            prepare_proc_console(dumppath, theme_color, theme_color1, theme_color2)
            proc_console = os.path.join(dumppath, "HTML/proc_console.html")
            proc_log = os.path.join(dumppath, "HTML/proc_log.html")
            break
        
    paramslist = []
    refresh_main = True
    item_list = []
    j = 1
    # open log in webbrowser
    if screen == True:
            sessioninfo = screenid
            screenargs = get_screen_info(sessioninfo)
            PID = int(screenargs[0])
            screenstatus = screenargs[2]        
    HTML_outer(num_sets, oldcutoffmode, theme_color, theme_color1, theme_color2)        
    HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
    page = os.path.join(dumppath, 'batchproc.html')
    if  os.path.exists(page) == True:
        utility_command = browser + " ./batchproc.html"
        silent = True
        utility_function(utility_command, silent)
        print('')
        print('Processing log in webbrowser refreshes every 30 sec.')
        print('')

    for dataset in datasets:
        job_t = time.time()
        csv_entry = ['N/A','N/A','False','N/A','N/A','N/A','N/A','N/A','N/A',]
        proc_date = (time.strftime("%d %b %Y", time.localtime()))
        csv_entry[0] = proc_date
        csv_entry[1] = dataset[0]
        ds_infos = []
        refresh = True
        n = 1
        i = 1
        previous_failed  = ['']
        failed_processing = ['']
        while True:
            ds_log = dataset[0] + "_" + str(n) + "_log.txt"
            if os.path.exists(ds_log):
                n += 1
            else:
                break
        if h52cbf == True:
            ds_number = j
            ds_id = dataset[0]
            ds_output = dataset[6]
            ds_status = "converting"
            current_mode = ""
            items = prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2)
            item = items[0]
            item_list.append(item)
            if screen == True:
                sessioninfo = screenid
                screenargs = get_screen_info(sessioninfo)
                PID = int(screenargs[0])
                screenstatus = screenargs[2]
            HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
            print(separator)
            print("Converting HDF5 to mini-cbf for", dataset[0], "number", str(j), "of", str(len(datasets)), "datasets.")
            cbffolder = os.path.join(dataset[6], "tmpcbfs")
            cbfconversion_function(cbffolder, dataset[1], dataset[2], dumppath)
            dataset[1] = cbffolder
            dataset[2] = "image_######.cbf"
            item_list.pop()
        success = False
        while True:
            runpath1 = 'autoproc/autobatch_' + str(i)
            procmainpath = os.path.join(dataset[6], runpath1)
            if os.path.exists(procmainpath):
                i += 1
            else:
                print("Processing goes to:", procmainpath)
                break
        if prepfolder_batch == True:
            prepfolder_list = re.split("[\s,;]+", preplist)
            for prepitem in prepfolder_list:
                try:
                    os.makedirs(os.path.join(dataset[6], prepitem)) 
                except:
                    print('Subfolder "' + prepitem + '" is already existing.')          
        for currprocmode in modeselector:
            #print (currprocmode)
            if modeselector[currprocmode] == True:
                if currprocmode == "fast":
                    print("Processing in fast mode. (-M fast)")
                    current_mode = "Fast"
                    dataset [7] = "-M fast"
                    procpath = os.path.join(procmainpath,"fast")
                if currprocmode == "normal":
                    print("Processing in normal mode.")
                    current_mode = "Normal"
                    dataset [7] = ""
                    procpath = os.path.join(procmainpath,"normal")
                if currprocmode == "problematic":
                    print("Processing in fast mode. (-M LowResOrTricky)")
                    current_mode = "Problematic"
                    dataset [7] = "-M LowResOrTricky"
                    procpath = os.path.join(procmainpath,"problematic")
            else:
                continue
            dataset[6] = procpath
            print(separator)
            print('')
            print('Processing "' + dataset[0] + '", number', str(j), 'of', str(len(datasets)), 'datasets.')
            print('Processing run number for current dataset is ' + str(i))
            print ('Output will be found in: '+ procpath)
            print('')
            #goto_path = os.path.relpath(os.path.join(procpath, "output-files"))
            ds_log = os.path.join(dumppath, ds_log)
            text_log = os.path.join(procpath, "log.txt")
            sweepset = (",".join([dataset[0], dataset[1], dataset[2], dataset[3], dataset[4]]))
            if oldcutoffmode == True:
                param = ((' '.join(["process", "-Id", sweepset, "-d output-files", dataset[7], dataset[9]])).strip(' ')) + " -nthreads " + batchprocs + " " + old_cutoff_param + " | tee -a " + ds_log + " " + text_log + " " + proc_console + " " + proc_log
            else:
                param = ((' '.join(["process", "-Id", sweepset, "-d output-files", dataset[7], dataset[9]])).strip(' ')) + " -nthreads " + batchprocs + " | tee -a " + ds_log + " " + text_log + " " + proc_console + " " + proc_log
            csv_entry[8] = re.split("\|", param)[0]
            print('Executing autoPROC with:\n',param)
            HTML_log(j, procpath, refresh, theme_color, theme_color1, theme_color2)
            ds_number = j
            ds_id = dataset[0]
            ds_output = dataset[6]
            ds_status = "running"
            items = prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2)
            item = items[0]
            failed_processing = ['']
            item_list.append(item)
            if screen == True:
                sessioninfo = screenid
                screenargs = get_screen_info(sessioninfo)
                PID = int(screenargs[0])
                screenstatus = screenargs[2]
            progress_function(dumppath, ds_output, theme_color, theme_color1, theme_color2)
            HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
            item_list.pop()
            paramslist.append(param)
            time.sleep(0.5)
            autoproc_function(param, procpath) 
            refresh = False
            HTML_log(j, procpath, refresh, theme_color, theme_color1, theme_color2)
            print ('Logfile "'+ ds_log + '" has been written to ' + dumppath)
            print('')
            print(separator)
            print('')
            
            isofile = procpath + "/output-files/truncate-unique.mtz"
            isoout = procpath + "/isotropic.mtz"
            anisofile = procpath + "/output-files/staraniso_alldata-unique.mtz"
            anisoout = procpath + "/anisotropic.mtz"
            if  os.path.exists(isofile) == True:
                iso_command ="cp "+ isofile + " " + isoout
                os.system(iso_command)
                print('')
                print("Isotropically scaled MTZ copied to:")
                print(isoout)
            if  os.path.exists(anisofile) == True:
                aniso_command ="cp "+ anisofile + " " + anisoout
                os.system(aniso_command)
                print('')
                print("Scaled MTZ from STARANISO copied to:")
                print(anisoout)
            # copy pdf reports and mmcif files
            stufffolder = procpath + "/useful_files/"
            if  os.path.exists(stufffolder) == False:
                makestufffolder = "mkdir " + stufffolder
                os.system(makestufffolder)
            isoreport = procpath + "/output-files/report.pdf"
            anisoreport = procpath + "/output-files/report_staraniso.pdf"
            isorepout = procpath + "/isotropic_report.pdf"
            anisorepout = procpath + "/anisotropic_report.pdf"
            isocif = procpath + "/output-files/Data_2_autoPROC_TRUNCATE_all.cif"
            anisocif = procpath + "/output-files/Data_1_autoPROC_STARANISO_all.cif"
            isocifout = procpath + "/useful_files/isotropic_mmCIF_for_PDB.cif"
            anisocifout = procpath + "/useful_files/anisotropic_mmCIF_for_PDB.cif"
            if  os.path.exists(isoreport) == True:
                isorep_command ="cp "+ isoreport + " " + isorepout
                os.system(isorep_command)
                print('')
                print("PDF report for isotropic data:")
                print(isorepout)
            if  os.path.exists(anisoreport) == True:
                anisorep_command ="cp "+ anisoreport + " " + anisorepout
                os.system(anisorep_command)
                print('')
                print("PDF report for anisotropic data from STARANISO:")
                print(anisorepout)
            if  os.path.exists(isocif) == True:
                isocif_command ="cp "+ isocif + " " + isocifout
                os.system(isocif_command)
                print('')
                print("mmCIF for PDB deposition of isotropic data\n(has to combined with mmCIF from refinement with BUSTER):")
                print(isocifout)
            if  os.path.exists(anisocif) == True:
                anisocif_command ="cp "+ anisocif + " " + anisocifout
                os.system(anisocif_command)
                print('')
                print("mmCIF for PDB deposition of anisotropic data from STARANISO\n(has to combined with mmCIF from refinement with BUSTER):")
                print(anisocifout)
            for useful_file in useful_files_to_copy:
                filetocopy = procpath + "/output-files/" + useful_file
                if  os.path.exists(filetocopy) == True:
                    cp_command = "cp " + filetocopy + " " + procpath + "/useful_files/"
                    os.system(cp_command)
                    print(useful_file, 'has been copied to the "useful_files" subfolder')    

            if  os.path.exists(isofile) == True:    
                print('')
                print('Processing of "' + dataset[0] + '", number', str(j), 'of', str(len(datasets)), 'datasets is done!')
                print ('Output has been written to '+ procpath)
                ds_info_stuff = dataset_infos(dumppath, ds_log)
                ds_infos = ds_info_stuff[0]
                ds_info_csv = ds_info_stuff[1]
                csv_entry[3] = ds_info_csv[0]
                csv_entry[4] = ds_info_csv[1]
                csv_entry[5] = ds_info_csv[2]
                csv_entry[6] = ds_info_csv[3]
                csv_entry[7] = ds_info_csv[4]
                ds_number = j
                ds_id = dataset[0]
                ds_output = dataset[6]
                if ds_infos[0] == "ERROR":
                    ds_status = "fail"
                    print('Processing of "' + dataset[0] + '", number', str(j), 'of', str(len(datasets)), 'has failed!')
                    print ('Please check the log in '+ procpath + ' for details')
                    items = prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2)
                    item = items[0]
                    #previous_failed = items[1]
                    failed_processing = items[1]
                    for line in failed_processing:
                        previous_failed.append(line)
                    item_list.append(item)
                    if screen == True:
                        sessioninfo = screenid
                        screenargs = get_screen_info(sessioninfo)
                        PID = int(screenargs[0])
                        screenstatus = screenargs[2]
                    HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
                    last_item = item_list.pop()
                    failedmarker = ds_output + "/output-files/failed.txt"
                    f = open(failedmarker, "w")
                    f.write ('Job has failed!')
                    f.close()
                else:    
                    ds_status = "done"
                    items = prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2)
                    item = items[0]
                    failed_processing = ['']
                    item_list.append(item)
                    if screen == True:
                        sessioninfo = screenid
                        screenargs = get_screen_info(sessioninfo)
                        PID = int(screenargs[0])
                        screenstatus = screenargs[2]
                    HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
                    success = True
                    csv_entry[2] = 'True'
                    previous_failed  = ['']
                    failed_processing = ['']
                    # clean up your shit
                    if datasaving == True:
                        time.sleep(0.1)
                        cleanup_command = "find " + procpath + "/output-files/ " + cleanup_args
                        os.system(cleanup_command)
                        print('')
                        print('Output files have been cleaned up.')
                        time.sleep(0.1)  
                    break
            else:
                print('Processing of "' + dataset[0] + '", number', str(j), 'of', str(len(datasets)), 'has failed!')
                print ('Please check the log in '+ procpath + ' for details')
                ds_number = j
                ds_id = dataset[0]
                ds_output = dataset[6]
                ds_status = "fail"
                items = prepare_table_item(current_mode, dumppath, ds_number, ds_id, ds_output, ds_status, ds_infos, previous_failed, theme_color, theme_color1, theme_color2)
                item = items[0]
                #previous_failed = items[1]
                failed_processing = items[1]
                for line in failed_processing:
                    previous_failed.append(line)
                item_list.append(item)
                if screen == True:
                    sessioninfo = screenid
                    screenargs = get_screen_info(sessioninfo)
                    PID = int(screenargs[0])
                    screenstatus = screenargs[2]
                HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
                last_item = item_list.pop()
                failedmarker = ds_output + "/output-files/failed.txt"
                f = open(failedmarker, "w")
                f.write ('Job has failed!')
                f.close()
            # clean up your shit
            if datasaving == True:
                time.sleep(0.1)
                cleanup_command = "find " + procpath + "/output-files/ " + cleanup_args
                os.system(cleanup_command)
                print('')
                print('Output files have been cleaned up.')
                time.sleep(0.1)   
        if success != True:
            item_list.append(last_item)
            HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)
        print('')
        previous_failed  = ['']
        failed_processing = ['']
        stopfile = (procpath + '/output-files/autobatch_done.txt')
        f = open(stopfile, "w")
        f.write ('Processing is done!')
        f.close()
        csv_content.append(csv_entry)
        csv_entry = []
        
        

        # clean up your shit
        if h52cbf == True:
            shutil.rmtree(cbffolder)
            print("Removed temporary files.")
            print('')
        j += 1
        time.sleep(30)
        
    print('')
    print(separator)
    print('')
    print('Batch processing completed!')
    print('autoproc has been executed for', str(len(paramslist)), 'datasets with:')
    print('\n'.join(paramslist))
    print('')
    print(separator)
    print('')
    f = open(proc_log, "a")
    f.write('\n\n')
    f.write(separator)
    f.write('\n\n')
    f.write('Batch processing completed!\n')
    writestuff1 = 'autoproc has been executed for '+ str(len(paramslist)) + ' datasets with:\n'
    writestuff2 = '\n\n'.join(paramslist)
    f.write(writestuff1)
    f.write(writestuff2)
    f.write('\n\n')
    f.write(separator)
    f.write('\n\n')
    f.write('</body>\n')
    f.write('</html>\n')
    f.close()
    refresh_main = False
    if screen == True:
        sessioninfo = screenid
        screenargs = get_screen_info(sessioninfo)
        PID = int(screenargs[0])
        screenstatus = screenargs[2]
    HTML_batch(start_t, job_t, PID, screenid, screenstatus, refresh_main, dumppath, num_sets, item_list, theme_color, theme_color1, theme_color2)       
    runflag = False
    time.sleep(10)
    os.replace(proc_log, proc_console)
    time.sleep(10)
    export_csv(dumppath, csv_header, csv_content)
    if screen == True:
        sessioninfo = screenid
        screenargs = get_screen_info(sessioninfo)
        screenstatus = screenargs[2]
        if screenstatus == "Attached":
            browsertext = os.path.join(dumppath, "batchproc.html")
            layout_endscreen = [[sg.Text("Batch processing is done.", justification = "center", font = "Arial 12")],
                               [sg.Text('')],
                               [sg.Text('Click "Okay" to terminate session.')],
                               [sg.Text('The browser window will also close, if still open.')],
                               [sg.Text('To access the data, copy this link to your browser:')],
                               [sg.InputText(default_text= browsertext, size = (60, None), background_color = "white", text_color = "blue", font = "Courier 10 underline")],
                               [sg.Text('')],
                               [sg.Button('Okay', highlight_colors = (theme_color, theme_color))]]
            window_endscreen = sg.Window('Done.', layout_endscreen, no_titlebar=False, grab_anywhere=False, finalize = True)
            while True: 
                event_endscreen, values_endscreen = window_endscreen.read()                             
                if event_endscreen == sg.WIN_CLOSED or event_endscreen == 'Okay':
                    window_endscreen.close()
                    layout_endscreen = None
                    window_endscreen = None
                    gc.collect()
                    break
            kill_command = 'screen -S ' + screenid + ' -X quit'
            os.system(kill_command)
        else:
            kill_command = 'screen -S ' + screenid + ' -X quit'
            os.system(kill_command)
    else:
        print('Stopping...')
        print('')
        print(separator)
    

    
